syntax = "proto3";

package stonesthrow;

message ShellCommand {
  repeated string command = 1;
  string directory = 2;
  string host = 3;
}

message ShellTask {
  ShellCommand command = 1;
  RunState state = 2;
  int64 system_time_ns = 3;
  int64 user_time_ns = 4;
}

message RepositoryState {
  string repository = 2;
  string revision = 3;
}

message RunState {
  int64 start_time = 1;
  bool running = 2;
  int64 end_time = 3;
}

message BuilderJob {
  int32 id = 1;
  string request = 2;
  RepositoryState repository_state = 3;
  RunState run_state = 4;
  repeated ShellTask shell_tasks = 5;
}

message BuilderJobs {
  repeated BuilderJob jobs = 1;
}

message GitBranchInfo {
  message GitBranch {
    string name = 1;
    string revision = 2;
    int32 revisions_ahead = 3;
    int32 revisions_behind = 4;
    map<string, string> config = 5;
  }

  repeated GitBranch branches = 1;
  repeated string upstream = 2;
}

message LogEvent {
  enum Severity {
    ERROR = 0;
    INFO = 1;
    DEBUG = 2;
  }
  string host = 1;
  string msg = 2;
  Severity severity = 3;
}

message BeginCommandEvent {
  ShellCommand command = 1;
}

message CommandOutputEvent {
  enum Stream {
    OUT = 0;
    ERR = 1;
  }

  Stream stream = 1;
  string output = 2;
}

message EndCommandEvent {
  int32 return_code = 1;
  int64 system_time_ns = 2;
  int64 user_time_ns = 3;
}

message GitBranchTaskEvent {
  enum Result {
    SUCCEEDED = 0;
    FAILED = 1;
  }
  string branch = 1;
  Result result = 2;
  string revision = 3;
  string reason = 4;
}

message JobEvent {
  LogEvent log_event = 1;
  BeginCommandEvent begin_command_event = 2;
  CommandOutputEvent command_output_event = 3;
  EndCommandEvent end_command_event = 4;
  GitBranchTaskEvent branch_task_event = 5;
}

message BuildOptions {
  repeated string targets = 1;
  RepositoryState repository_state = 2;
}

message RunOptions {
  ShellCommand command = 1;
  RepositoryState repository_state = 2;
}

message TargetList {
  repeated string target = 1;
}

service PlatformBuildHost {
  rpc ListJobs(RepositoryState) returns (BuilderJobs);
  rpc KillJobs(BuilderJobs) returns (stream JobEvent);

  rpc Build(BuildOptions) returns (stream JobEvent);
  rpc Run(RunOptions) returns (stream JobEvent);
  rpc Clobber(RepositoryState) returns (stream JobEvent);
  rpc Prepare(RepositoryState) returns (stream JobEvent);
  rpc ListTargets(RepositoryState) returns (TargetList);
}

service RepositoryHost {
  rpc GetBranchConfig(RepositoryState) returns (GitBranchInfo);
  rpc SetBranchConfig(GitBranchInfo) returns (stream JobEvent);
  rpc PullFromUpstream(GitBranchInfo) returns (stream JobEvent);
  rpc PushToUpstream(GitBranchInfo) returns (stream JobEvent);
  rpc Status(RepositoryState) returns (stream JobEvent);
  rpc SyncLocal(RepositoryState) returns (stream JobEvent);
  rpc Sync(RepositoryState) returns (stream JobEvent);
  rpc PrepareForReceive(RepositoryState) returns (stream JobEvent);
}

service ServiceControl {
  rpc Shutdown(RepositoryState) returns (stream JobEvent);
  rpc SelfUpdate(RepositoryState) returns (stream JobEvent) ;
}
