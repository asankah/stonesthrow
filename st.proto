// Generate with '! protoc --go_out=plugins=grpc:. *.proto

syntax = "proto3";

package stonesthrow;
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

message ShellCommand {
  repeated string command = 1;
  string directory = 2;
  string host = 3;
}

message RepositoryState {
  string repository = 2;
  string revision = 3;
}

message RunState {
  google.protobuf.Timestamp start_time = 1;
  bool running = 2;
  google.protobuf.Timestamp end_time = 3;
}

message BuilderJob {
  int32 id = 1;
  ShellCommand command = 2;
  RunState state = 3;
  google.protobuf.Duration system_time = 4;
  google.protobuf.Duration user_time = 5;
}

message BuilderJobs {
  repeated BuilderJob jobs = 1;
}

message GitRepositoryInfo {
  message Branch {
    string name = 1;
    string revision = 2;
    int32 revisions_ahead = 3;
    int32 revisions_behind = 4;
    map<string, string> config = 5;
  }

  message Upstream {
    string name = 1;
    string push_url = 2;
    string fetch_url = 3;
  }

  string repository = 1;
  repeated Branch branches = 2;
  repeated Upstream upstreams = 3;
}

message LogEvent {
  enum Severity {
    ERROR = 0;
    INFO = 1;
    DEBUG = 2;
  }
  string host = 1;
  string msg = 2;
  Severity severity = 3;
}

message BeginCommandEvent {
  ShellCommand command = 1;
}

message CommandOutputEvent {
  enum Stream {
    OUT = 0;
    ERR = 1;
  }

  Stream stream = 1;
  string output = 2;
}

message EndCommandEvent {
  int32 return_code = 1;
  google.protobuf.Duration system_time = 2;
  google.protobuf.Duration user_time =3;
}

message GitBranchTaskEvent {
  enum Result {
    SUCCEEDED = 0;
    FAILED = 1;
  }
  string branch = 1;
  Result result = 2;
  string revision = 3;
  string reason = 4;
}

message ZippedContentEvent {
  bytes data = 1;
}

message JobEvent {
  google.protobuf.Timestamp time = 1;

  LogEvent log_event = 2;
  BeginCommandEvent begin_command_event = 3;
  CommandOutputEvent command_output_event = 4;
  EndCommandEvent end_command_event = 5;
  GitBranchTaskEvent branch_task_event = 6;
  ZippedContentEvent zipped_content = 7;
}

message BranchList {
  string repository = 1;
  repeated string branch = 2;
}

message RunOptions {
  string platform = 1;
  RepositoryState repository_state = 2;
  TargetList dependencies = 3;
  ShellCommand command = 4;
}

message PingOptions {
  string ping = 1;
}

message PingResult {
  string pong = 1;
}

message FetchFileOptions {
  string repository = 1;
  string platform = 2;
  string relative_path = 3;
  string filename_glob = 4;
  bool recurse = 5;
}

message BranchConfigOptions {
  string repository = 1;
  string branch_spec = 2;
  bool include_git_config = 3;
}

message ListCommandsOptions {
  string repository = 1;
  string platform = 2;
}

message Command {
  repeated string name = 1;
  string description = 2;
  string usage = 3;
  bool depends_on_source = 4;
  bool visible = 5;
}

message CommandList {
  repeated Command command = 1;
}

message ListTargetsOptions {
  string repository = 1;
  string platform = 2;
}

message TargetList {
  repeated string target = 1;
}

message ListJobsOptions {
}

message KillJobsOptions {
  repeated int32 id = 1;
}

message ShutdownOptions {
}

message SelfUpdateOptions {
}

service BuildHost {
  rpc RunScriptCommand(RunOptions) returns (stream JobEvent);
  rpc ListScriptCommands(ListCommandsOptions) returns (CommandList);
  rpc ListTargets(ListTargetsOptions) returns (TargetList);
  rpc RunShellCommand(RunOptions) returns (stream JobEvent);
  rpc FetchFile(FetchFileOptions) returns (stream JobEvent);
}

service RepositoryHost {
  rpc RunScriptCommand(RunOptions) returns (stream JobEvent);
  rpc ListScriptCommands(ListCommandsOptions) returns (CommandList);
  rpc RunShellCommand(RunOptions) returns (stream JobEvent);
  rpc GetBranchConfig(BranchConfigOptions) returns (GitRepositoryInfo);
  rpc SetBranchConfig(GitRepositoryInfo) returns (stream JobEvent);
  rpc PullFromUpstream(BranchList) returns (stream JobEvent);
  rpc PushToUpstream(BranchList) returns (stream JobEvent);
  rpc Status(RepositoryState) returns (stream JobEvent);
  rpc SyncRemote(RepositoryState) returns (stream JobEvent);
  rpc PrepareForReceive(RepositoryState) returns (stream JobEvent);
  rpc FetchFile(FetchFileOptions) returns (stream JobEvent);
}

service ServiceHost {
  rpc Ping(PingOptions) returns (PingResult);
  rpc ListJobs(ListJobsOptions) returns (BuilderJobs);
  rpc KillJobs(KillJobsOptions) returns (stream JobEvent);
  rpc Shutdown(ShutdownOptions) returns (stream JobEvent);
  rpc SelfUpdate(SelfUpdateOptions) returns (stream JobEvent) ;
}
