// Code generated by protoc-gen-go. DO NOT EDIT.
// source: st.proto

/*
Package stonesthrow is a generated protocol buffer package.

It is generated from these files:
	st.proto

It has these top-level messages:
	ShellCommand
	RepositoryState
	RunState
	BuilderJob
	BuilderJobs
	GitRepositoryInfo
	LogEvent
	BeginCommandEvent
	CommandOutputEvent
	EndCommandEvent
	GitBranchTaskEvent
	ZippedContentEvent
	JobEvent
	BranchList
	RunOptions
	PingOptions
	PingResult
	FetchFileOptions
	BranchConfigOptions
	ListCommandsOptions
	Command
	CommandList
	ListTargetsOptions
	TargetList
	ListJobsOptions
	KillJobsOptions
	ShutdownOptions
	SelfUpdateOptions
*/
package stonesthrow

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/duration"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LogEvent_Severity int32

const (
	LogEvent_ERROR LogEvent_Severity = 0
	LogEvent_INFO  LogEvent_Severity = 1
	LogEvent_DEBUG LogEvent_Severity = 2
)

var LogEvent_Severity_name = map[int32]string{
	0: "ERROR",
	1: "INFO",
	2: "DEBUG",
}
var LogEvent_Severity_value = map[string]int32{
	"ERROR": 0,
	"INFO":  1,
	"DEBUG": 2,
}

func (x LogEvent_Severity) String() string {
	return proto.EnumName(LogEvent_Severity_name, int32(x))
}
func (LogEvent_Severity) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 0} }

type CommandOutputEvent_Stream int32

const (
	CommandOutputEvent_OUT CommandOutputEvent_Stream = 0
	CommandOutputEvent_ERR CommandOutputEvent_Stream = 1
)

var CommandOutputEvent_Stream_name = map[int32]string{
	0: "OUT",
	1: "ERR",
}
var CommandOutputEvent_Stream_value = map[string]int32{
	"OUT": 0,
	"ERR": 1,
}

func (x CommandOutputEvent_Stream) String() string {
	return proto.EnumName(CommandOutputEvent_Stream_name, int32(x))
}
func (CommandOutputEvent_Stream) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 0} }

type GitBranchTaskEvent_Result int32

const (
	GitBranchTaskEvent_SUCCEEDED GitBranchTaskEvent_Result = 0
	GitBranchTaskEvent_FAILED    GitBranchTaskEvent_Result = 1
)

var GitBranchTaskEvent_Result_name = map[int32]string{
	0: "SUCCEEDED",
	1: "FAILED",
}
var GitBranchTaskEvent_Result_value = map[string]int32{
	"SUCCEEDED": 0,
	"FAILED":    1,
}

func (x GitBranchTaskEvent_Result) String() string {
	return proto.EnumName(GitBranchTaskEvent_Result_name, int32(x))
}
func (GitBranchTaskEvent_Result) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{10, 0}
}

type ShellCommand struct {
	Command   []string `protobuf:"bytes,1,rep,name=command" json:"command,omitempty"`
	Directory string   `protobuf:"bytes,2,opt,name=directory" json:"directory,omitempty"`
	Host      string   `protobuf:"bytes,3,opt,name=host" json:"host,omitempty"`
}

func (m *ShellCommand) Reset()                    { *m = ShellCommand{} }
func (m *ShellCommand) String() string            { return proto.CompactTextString(m) }
func (*ShellCommand) ProtoMessage()               {}
func (*ShellCommand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ShellCommand) GetCommand() []string {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *ShellCommand) GetDirectory() string {
	if m != nil {
		return m.Directory
	}
	return ""
}

func (m *ShellCommand) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type RepositoryState struct {
	Repository string `protobuf:"bytes,2,opt,name=repository" json:"repository,omitempty"`
	Revision   string `protobuf:"bytes,3,opt,name=revision" json:"revision,omitempty"`
}

func (m *RepositoryState) Reset()                    { *m = RepositoryState{} }
func (m *RepositoryState) String() string            { return proto.CompactTextString(m) }
func (*RepositoryState) ProtoMessage()               {}
func (*RepositoryState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RepositoryState) GetRepository() string {
	if m != nil {
		return m.Repository
	}
	return ""
}

func (m *RepositoryState) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

type RunState struct {
	StartTime *google_protobuf1.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	Running   bool                        `protobuf:"varint,2,opt,name=running" json:"running,omitempty"`
	EndTime   *google_protobuf1.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
}

func (m *RunState) Reset()                    { *m = RunState{} }
func (m *RunState) String() string            { return proto.CompactTextString(m) }
func (*RunState) ProtoMessage()               {}
func (*RunState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RunState) GetStartTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *RunState) GetRunning() bool {
	if m != nil {
		return m.Running
	}
	return false
}

func (m *RunState) GetEndTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

type BuilderJob struct {
	Id         int32                     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Command    *ShellCommand             `protobuf:"bytes,2,opt,name=command" json:"command,omitempty"`
	State      *RunState                 `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"`
	SystemTime *google_protobuf.Duration `protobuf:"bytes,4,opt,name=system_time,json=systemTime" json:"system_time,omitempty"`
	UserTime   *google_protobuf.Duration `protobuf:"bytes,5,opt,name=user_time,json=userTime" json:"user_time,omitempty"`
}

func (m *BuilderJob) Reset()                    { *m = BuilderJob{} }
func (m *BuilderJob) String() string            { return proto.CompactTextString(m) }
func (*BuilderJob) ProtoMessage()               {}
func (*BuilderJob) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *BuilderJob) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BuilderJob) GetCommand() *ShellCommand {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *BuilderJob) GetState() *RunState {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *BuilderJob) GetSystemTime() *google_protobuf.Duration {
	if m != nil {
		return m.SystemTime
	}
	return nil
}

func (m *BuilderJob) GetUserTime() *google_protobuf.Duration {
	if m != nil {
		return m.UserTime
	}
	return nil
}

type BuilderJobs struct {
	Jobs []*BuilderJob `protobuf:"bytes,1,rep,name=jobs" json:"jobs,omitempty"`
}

func (m *BuilderJobs) Reset()                    { *m = BuilderJobs{} }
func (m *BuilderJobs) String() string            { return proto.CompactTextString(m) }
func (*BuilderJobs) ProtoMessage()               {}
func (*BuilderJobs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BuilderJobs) GetJobs() []*BuilderJob {
	if m != nil {
		return m.Jobs
	}
	return nil
}

type GitRepositoryInfo struct {
	Repository string                        `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	Branches   []*GitRepositoryInfo_Branch   `protobuf:"bytes,2,rep,name=branches" json:"branches,omitempty"`
	Upstreams  []*GitRepositoryInfo_Upstream `protobuf:"bytes,3,rep,name=upstreams" json:"upstreams,omitempty"`
}

func (m *GitRepositoryInfo) Reset()                    { *m = GitRepositoryInfo{} }
func (m *GitRepositoryInfo) String() string            { return proto.CompactTextString(m) }
func (*GitRepositoryInfo) ProtoMessage()               {}
func (*GitRepositoryInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GitRepositoryInfo) GetRepository() string {
	if m != nil {
		return m.Repository
	}
	return ""
}

func (m *GitRepositoryInfo) GetBranches() []*GitRepositoryInfo_Branch {
	if m != nil {
		return m.Branches
	}
	return nil
}

func (m *GitRepositoryInfo) GetUpstreams() []*GitRepositoryInfo_Upstream {
	if m != nil {
		return m.Upstreams
	}
	return nil
}

type GitRepositoryInfo_Branch struct {
	Name            string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Revision        string            `protobuf:"bytes,2,opt,name=revision" json:"revision,omitempty"`
	RevisionsAhead  int32             `protobuf:"varint,3,opt,name=revisions_ahead,json=revisionsAhead" json:"revisions_ahead,omitempty"`
	RevisionsBehind int32             `protobuf:"varint,4,opt,name=revisions_behind,json=revisionsBehind" json:"revisions_behind,omitempty"`
	Config          map[string]string `protobuf:"bytes,5,rep,name=config" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GitRepositoryInfo_Branch) Reset()                    { *m = GitRepositoryInfo_Branch{} }
func (m *GitRepositoryInfo_Branch) String() string            { return proto.CompactTextString(m) }
func (*GitRepositoryInfo_Branch) ProtoMessage()               {}
func (*GitRepositoryInfo_Branch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

func (m *GitRepositoryInfo_Branch) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GitRepositoryInfo_Branch) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

func (m *GitRepositoryInfo_Branch) GetRevisionsAhead() int32 {
	if m != nil {
		return m.RevisionsAhead
	}
	return 0
}

func (m *GitRepositoryInfo_Branch) GetRevisionsBehind() int32 {
	if m != nil {
		return m.RevisionsBehind
	}
	return 0
}

func (m *GitRepositoryInfo_Branch) GetConfig() map[string]string {
	if m != nil {
		return m.Config
	}
	return nil
}

type GitRepositoryInfo_Upstream struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	PushUrl  string `protobuf:"bytes,2,opt,name=push_url,json=pushUrl" json:"push_url,omitempty"`
	FetchUrl string `protobuf:"bytes,3,opt,name=fetch_url,json=fetchUrl" json:"fetch_url,omitempty"`
}

func (m *GitRepositoryInfo_Upstream) Reset()                    { *m = GitRepositoryInfo_Upstream{} }
func (m *GitRepositoryInfo_Upstream) String() string            { return proto.CompactTextString(m) }
func (*GitRepositoryInfo_Upstream) ProtoMessage()               {}
func (*GitRepositoryInfo_Upstream) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 1} }

func (m *GitRepositoryInfo_Upstream) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GitRepositoryInfo_Upstream) GetPushUrl() string {
	if m != nil {
		return m.PushUrl
	}
	return ""
}

func (m *GitRepositoryInfo_Upstream) GetFetchUrl() string {
	if m != nil {
		return m.FetchUrl
	}
	return ""
}

type LogEvent struct {
	Host     string            `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	Msg      string            `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	Severity LogEvent_Severity `protobuf:"varint,3,opt,name=severity,enum=stonesthrow.LogEvent_Severity" json:"severity,omitempty"`
}

func (m *LogEvent) Reset()                    { *m = LogEvent{} }
func (m *LogEvent) String() string            { return proto.CompactTextString(m) }
func (*LogEvent) ProtoMessage()               {}
func (*LogEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *LogEvent) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *LogEvent) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *LogEvent) GetSeverity() LogEvent_Severity {
	if m != nil {
		return m.Severity
	}
	return LogEvent_ERROR
}

type BeginCommandEvent struct {
	Command *ShellCommand `protobuf:"bytes,1,opt,name=command" json:"command,omitempty"`
}

func (m *BeginCommandEvent) Reset()                    { *m = BeginCommandEvent{} }
func (m *BeginCommandEvent) String() string            { return proto.CompactTextString(m) }
func (*BeginCommandEvent) ProtoMessage()               {}
func (*BeginCommandEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *BeginCommandEvent) GetCommand() *ShellCommand {
	if m != nil {
		return m.Command
	}
	return nil
}

type CommandOutputEvent struct {
	Stream CommandOutputEvent_Stream `protobuf:"varint,1,opt,name=stream,enum=stonesthrow.CommandOutputEvent_Stream" json:"stream,omitempty"`
	Output string                    `protobuf:"bytes,2,opt,name=output" json:"output,omitempty"`
}

func (m *CommandOutputEvent) Reset()                    { *m = CommandOutputEvent{} }
func (m *CommandOutputEvent) String() string            { return proto.CompactTextString(m) }
func (*CommandOutputEvent) ProtoMessage()               {}
func (*CommandOutputEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CommandOutputEvent) GetStream() CommandOutputEvent_Stream {
	if m != nil {
		return m.Stream
	}
	return CommandOutputEvent_OUT
}

func (m *CommandOutputEvent) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

type EndCommandEvent struct {
	ReturnCode int32                     `protobuf:"varint,1,opt,name=return_code,json=returnCode" json:"return_code,omitempty"`
	SystemTime *google_protobuf.Duration `protobuf:"bytes,2,opt,name=system_time,json=systemTime" json:"system_time,omitempty"`
	UserTime   *google_protobuf.Duration `protobuf:"bytes,3,opt,name=user_time,json=userTime" json:"user_time,omitempty"`
}

func (m *EndCommandEvent) Reset()                    { *m = EndCommandEvent{} }
func (m *EndCommandEvent) String() string            { return proto.CompactTextString(m) }
func (*EndCommandEvent) ProtoMessage()               {}
func (*EndCommandEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *EndCommandEvent) GetReturnCode() int32 {
	if m != nil {
		return m.ReturnCode
	}
	return 0
}

func (m *EndCommandEvent) GetSystemTime() *google_protobuf.Duration {
	if m != nil {
		return m.SystemTime
	}
	return nil
}

func (m *EndCommandEvent) GetUserTime() *google_protobuf.Duration {
	if m != nil {
		return m.UserTime
	}
	return nil
}

type GitBranchTaskEvent struct {
	Branch   string                    `protobuf:"bytes,1,opt,name=branch" json:"branch,omitempty"`
	Result   GitBranchTaskEvent_Result `protobuf:"varint,2,opt,name=result,enum=stonesthrow.GitBranchTaskEvent_Result" json:"result,omitempty"`
	Revision string                    `protobuf:"bytes,3,opt,name=revision" json:"revision,omitempty"`
	Reason   string                    `protobuf:"bytes,4,opt,name=reason" json:"reason,omitempty"`
}

func (m *GitBranchTaskEvent) Reset()                    { *m = GitBranchTaskEvent{} }
func (m *GitBranchTaskEvent) String() string            { return proto.CompactTextString(m) }
func (*GitBranchTaskEvent) ProtoMessage()               {}
func (*GitBranchTaskEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GitBranchTaskEvent) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *GitBranchTaskEvent) GetResult() GitBranchTaskEvent_Result {
	if m != nil {
		return m.Result
	}
	return GitBranchTaskEvent_SUCCEEDED
}

func (m *GitBranchTaskEvent) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

func (m *GitBranchTaskEvent) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type ZippedContentEvent struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ZippedContentEvent) Reset()                    { *m = ZippedContentEvent{} }
func (m *ZippedContentEvent) String() string            { return proto.CompactTextString(m) }
func (*ZippedContentEvent) ProtoMessage()               {}
func (*ZippedContentEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ZippedContentEvent) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type JobEvent struct {
	Time               *google_protobuf1.Timestamp `protobuf:"bytes,1,opt,name=time" json:"time,omitempty"`
	LogEvent           *LogEvent                   `protobuf:"bytes,2,opt,name=log_event,json=logEvent" json:"log_event,omitempty"`
	BeginCommandEvent  *BeginCommandEvent          `protobuf:"bytes,3,opt,name=begin_command_event,json=beginCommandEvent" json:"begin_command_event,omitempty"`
	CommandOutputEvent *CommandOutputEvent         `protobuf:"bytes,4,opt,name=command_output_event,json=commandOutputEvent" json:"command_output_event,omitempty"`
	EndCommandEvent    *EndCommandEvent            `protobuf:"bytes,5,opt,name=end_command_event,json=endCommandEvent" json:"end_command_event,omitempty"`
	BranchTaskEvent    *GitBranchTaskEvent         `protobuf:"bytes,6,opt,name=branch_task_event,json=branchTaskEvent" json:"branch_task_event,omitempty"`
	ZippedContent      *ZippedContentEvent         `protobuf:"bytes,7,opt,name=zipped_content,json=zippedContent" json:"zipped_content,omitempty"`
}

func (m *JobEvent) Reset()                    { *m = JobEvent{} }
func (m *JobEvent) String() string            { return proto.CompactTextString(m) }
func (*JobEvent) ProtoMessage()               {}
func (*JobEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *JobEvent) GetTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *JobEvent) GetLogEvent() *LogEvent {
	if m != nil {
		return m.LogEvent
	}
	return nil
}

func (m *JobEvent) GetBeginCommandEvent() *BeginCommandEvent {
	if m != nil {
		return m.BeginCommandEvent
	}
	return nil
}

func (m *JobEvent) GetCommandOutputEvent() *CommandOutputEvent {
	if m != nil {
		return m.CommandOutputEvent
	}
	return nil
}

func (m *JobEvent) GetEndCommandEvent() *EndCommandEvent {
	if m != nil {
		return m.EndCommandEvent
	}
	return nil
}

func (m *JobEvent) GetBranchTaskEvent() *GitBranchTaskEvent {
	if m != nil {
		return m.BranchTaskEvent
	}
	return nil
}

func (m *JobEvent) GetZippedContent() *ZippedContentEvent {
	if m != nil {
		return m.ZippedContent
	}
	return nil
}

type BranchList struct {
	Repository string   `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	Branch     []string `protobuf:"bytes,2,rep,name=branch" json:"branch,omitempty"`
}

func (m *BranchList) Reset()                    { *m = BranchList{} }
func (m *BranchList) String() string            { return proto.CompactTextString(m) }
func (*BranchList) ProtoMessage()               {}
func (*BranchList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *BranchList) GetRepository() string {
	if m != nil {
		return m.Repository
	}
	return ""
}

func (m *BranchList) GetBranch() []string {
	if m != nil {
		return m.Branch
	}
	return nil
}

type RunOptions struct {
	Repository   string        `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	Revision     string        `protobuf:"bytes,2,opt,name=revision" json:"revision,omitempty"`
	Platform     string        `protobuf:"bytes,3,opt,name=platform" json:"platform,omitempty"`
	Dependencies *TargetList   `protobuf:"bytes,4,opt,name=dependencies" json:"dependencies,omitempty"`
	Command      *ShellCommand `protobuf:"bytes,5,opt,name=command" json:"command,omitempty"`
}

func (m *RunOptions) Reset()                    { *m = RunOptions{} }
func (m *RunOptions) String() string            { return proto.CompactTextString(m) }
func (*RunOptions) ProtoMessage()               {}
func (*RunOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *RunOptions) GetRepository() string {
	if m != nil {
		return m.Repository
	}
	return ""
}

func (m *RunOptions) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

func (m *RunOptions) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *RunOptions) GetDependencies() *TargetList {
	if m != nil {
		return m.Dependencies
	}
	return nil
}

func (m *RunOptions) GetCommand() *ShellCommand {
	if m != nil {
		return m.Command
	}
	return nil
}

type PingOptions struct {
	Ping string `protobuf:"bytes,1,opt,name=ping" json:"ping,omitempty"`
}

func (m *PingOptions) Reset()                    { *m = PingOptions{} }
func (m *PingOptions) String() string            { return proto.CompactTextString(m) }
func (*PingOptions) ProtoMessage()               {}
func (*PingOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *PingOptions) GetPing() string {
	if m != nil {
		return m.Ping
	}
	return ""
}

type PingResult struct {
	Pong string `protobuf:"bytes,1,opt,name=pong" json:"pong,omitempty"`
}

func (m *PingResult) Reset()                    { *m = PingResult{} }
func (m *PingResult) String() string            { return proto.CompactTextString(m) }
func (*PingResult) ProtoMessage()               {}
func (*PingResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *PingResult) GetPong() string {
	if m != nil {
		return m.Pong
	}
	return ""
}

type FetchFileOptions struct {
	Repository   string `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	Platform     string `protobuf:"bytes,2,opt,name=platform" json:"platform,omitempty"`
	RelativePath string `protobuf:"bytes,3,opt,name=relative_path,json=relativePath" json:"relative_path,omitempty"`
	FilenameGlob string `protobuf:"bytes,4,opt,name=filename_glob,json=filenameGlob" json:"filename_glob,omitempty"`
	Recurse      bool   `protobuf:"varint,5,opt,name=recurse" json:"recurse,omitempty"`
}

func (m *FetchFileOptions) Reset()                    { *m = FetchFileOptions{} }
func (m *FetchFileOptions) String() string            { return proto.CompactTextString(m) }
func (*FetchFileOptions) ProtoMessage()               {}
func (*FetchFileOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *FetchFileOptions) GetRepository() string {
	if m != nil {
		return m.Repository
	}
	return ""
}

func (m *FetchFileOptions) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *FetchFileOptions) GetRelativePath() string {
	if m != nil {
		return m.RelativePath
	}
	return ""
}

func (m *FetchFileOptions) GetFilenameGlob() string {
	if m != nil {
		return m.FilenameGlob
	}
	return ""
}

func (m *FetchFileOptions) GetRecurse() bool {
	if m != nil {
		return m.Recurse
	}
	return false
}

type BranchConfigOptions struct {
	Repository       string `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	BranchSpec       string `protobuf:"bytes,2,opt,name=branch_spec,json=branchSpec" json:"branch_spec,omitempty"`
	IncludeGitConfig bool   `protobuf:"varint,3,opt,name=include_git_config,json=includeGitConfig" json:"include_git_config,omitempty"`
}

func (m *BranchConfigOptions) Reset()                    { *m = BranchConfigOptions{} }
func (m *BranchConfigOptions) String() string            { return proto.CompactTextString(m) }
func (*BranchConfigOptions) ProtoMessage()               {}
func (*BranchConfigOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *BranchConfigOptions) GetRepository() string {
	if m != nil {
		return m.Repository
	}
	return ""
}

func (m *BranchConfigOptions) GetBranchSpec() string {
	if m != nil {
		return m.BranchSpec
	}
	return ""
}

func (m *BranchConfigOptions) GetIncludeGitConfig() bool {
	if m != nil {
		return m.IncludeGitConfig
	}
	return false
}

type ListCommandsOptions struct {
	Repository string `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	Platform   string `protobuf:"bytes,2,opt,name=platform" json:"platform,omitempty"`
}

func (m *ListCommandsOptions) Reset()                    { *m = ListCommandsOptions{} }
func (m *ListCommandsOptions) String() string            { return proto.CompactTextString(m) }
func (*ListCommandsOptions) ProtoMessage()               {}
func (*ListCommandsOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *ListCommandsOptions) GetRepository() string {
	if m != nil {
		return m.Repository
	}
	return ""
}

func (m *ListCommandsOptions) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

type Command struct {
	Name            []string `protobuf:"bytes,1,rep,name=name" json:"name,omitempty"`
	Description     string   `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Usage           string   `protobuf:"bytes,3,opt,name=usage" json:"usage,omitempty"`
	DependsOnSource bool     `protobuf:"varint,4,opt,name=depends_on_source,json=dependsOnSource" json:"depends_on_source,omitempty"`
	Visible         bool     `protobuf:"varint,5,opt,name=visible" json:"visible,omitempty"`
}

func (m *Command) Reset()                    { *m = Command{} }
func (m *Command) String() string            { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()               {}
func (*Command) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *Command) GetName() []string {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Command) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Command) GetUsage() string {
	if m != nil {
		return m.Usage
	}
	return ""
}

func (m *Command) GetDependsOnSource() bool {
	if m != nil {
		return m.DependsOnSource
	}
	return false
}

func (m *Command) GetVisible() bool {
	if m != nil {
		return m.Visible
	}
	return false
}

type CommandList struct {
	Command []*Command `protobuf:"bytes,1,rep,name=command" json:"command,omitempty"`
}

func (m *CommandList) Reset()                    { *m = CommandList{} }
func (m *CommandList) String() string            { return proto.CompactTextString(m) }
func (*CommandList) ProtoMessage()               {}
func (*CommandList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *CommandList) GetCommand() []*Command {
	if m != nil {
		return m.Command
	}
	return nil
}

type ListTargetsOptions struct {
	Repository string `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	Platform   string `protobuf:"bytes,2,opt,name=platform" json:"platform,omitempty"`
}

func (m *ListTargetsOptions) Reset()                    { *m = ListTargetsOptions{} }
func (m *ListTargetsOptions) String() string            { return proto.CompactTextString(m) }
func (*ListTargetsOptions) ProtoMessage()               {}
func (*ListTargetsOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *ListTargetsOptions) GetRepository() string {
	if m != nil {
		return m.Repository
	}
	return ""
}

func (m *ListTargetsOptions) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

type TargetList struct {
	Target []string `protobuf:"bytes,1,rep,name=target" json:"target,omitempty"`
}

func (m *TargetList) Reset()                    { *m = TargetList{} }
func (m *TargetList) String() string            { return proto.CompactTextString(m) }
func (*TargetList) ProtoMessage()               {}
func (*TargetList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *TargetList) GetTarget() []string {
	if m != nil {
		return m.Target
	}
	return nil
}

type ListJobsOptions struct {
}

func (m *ListJobsOptions) Reset()                    { *m = ListJobsOptions{} }
func (m *ListJobsOptions) String() string            { return proto.CompactTextString(m) }
func (*ListJobsOptions) ProtoMessage()               {}
func (*ListJobsOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

type KillJobsOptions struct {
	Id []int32 `protobuf:"varint,1,rep,packed,name=id" json:"id,omitempty"`
}

func (m *KillJobsOptions) Reset()                    { *m = KillJobsOptions{} }
func (m *KillJobsOptions) String() string            { return proto.CompactTextString(m) }
func (*KillJobsOptions) ProtoMessage()               {}
func (*KillJobsOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *KillJobsOptions) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

type ShutdownOptions struct {
}

func (m *ShutdownOptions) Reset()                    { *m = ShutdownOptions{} }
func (m *ShutdownOptions) String() string            { return proto.CompactTextString(m) }
func (*ShutdownOptions) ProtoMessage()               {}
func (*ShutdownOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

type SelfUpdateOptions struct {
}

func (m *SelfUpdateOptions) Reset()                    { *m = SelfUpdateOptions{} }
func (m *SelfUpdateOptions) String() string            { return proto.CompactTextString(m) }
func (*SelfUpdateOptions) ProtoMessage()               {}
func (*SelfUpdateOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func init() {
	proto.RegisterType((*ShellCommand)(nil), "stonesthrow.ShellCommand")
	proto.RegisterType((*RepositoryState)(nil), "stonesthrow.RepositoryState")
	proto.RegisterType((*RunState)(nil), "stonesthrow.RunState")
	proto.RegisterType((*BuilderJob)(nil), "stonesthrow.BuilderJob")
	proto.RegisterType((*BuilderJobs)(nil), "stonesthrow.BuilderJobs")
	proto.RegisterType((*GitRepositoryInfo)(nil), "stonesthrow.GitRepositoryInfo")
	proto.RegisterType((*GitRepositoryInfo_Branch)(nil), "stonesthrow.GitRepositoryInfo.Branch")
	proto.RegisterType((*GitRepositoryInfo_Upstream)(nil), "stonesthrow.GitRepositoryInfo.Upstream")
	proto.RegisterType((*LogEvent)(nil), "stonesthrow.LogEvent")
	proto.RegisterType((*BeginCommandEvent)(nil), "stonesthrow.BeginCommandEvent")
	proto.RegisterType((*CommandOutputEvent)(nil), "stonesthrow.CommandOutputEvent")
	proto.RegisterType((*EndCommandEvent)(nil), "stonesthrow.EndCommandEvent")
	proto.RegisterType((*GitBranchTaskEvent)(nil), "stonesthrow.GitBranchTaskEvent")
	proto.RegisterType((*ZippedContentEvent)(nil), "stonesthrow.ZippedContentEvent")
	proto.RegisterType((*JobEvent)(nil), "stonesthrow.JobEvent")
	proto.RegisterType((*BranchList)(nil), "stonesthrow.BranchList")
	proto.RegisterType((*RunOptions)(nil), "stonesthrow.RunOptions")
	proto.RegisterType((*PingOptions)(nil), "stonesthrow.PingOptions")
	proto.RegisterType((*PingResult)(nil), "stonesthrow.PingResult")
	proto.RegisterType((*FetchFileOptions)(nil), "stonesthrow.FetchFileOptions")
	proto.RegisterType((*BranchConfigOptions)(nil), "stonesthrow.BranchConfigOptions")
	proto.RegisterType((*ListCommandsOptions)(nil), "stonesthrow.ListCommandsOptions")
	proto.RegisterType((*Command)(nil), "stonesthrow.Command")
	proto.RegisterType((*CommandList)(nil), "stonesthrow.CommandList")
	proto.RegisterType((*ListTargetsOptions)(nil), "stonesthrow.ListTargetsOptions")
	proto.RegisterType((*TargetList)(nil), "stonesthrow.TargetList")
	proto.RegisterType((*ListJobsOptions)(nil), "stonesthrow.ListJobsOptions")
	proto.RegisterType((*KillJobsOptions)(nil), "stonesthrow.KillJobsOptions")
	proto.RegisterType((*ShutdownOptions)(nil), "stonesthrow.ShutdownOptions")
	proto.RegisterType((*SelfUpdateOptions)(nil), "stonesthrow.SelfUpdateOptions")
	proto.RegisterEnum("stonesthrow.LogEvent_Severity", LogEvent_Severity_name, LogEvent_Severity_value)
	proto.RegisterEnum("stonesthrow.CommandOutputEvent_Stream", CommandOutputEvent_Stream_name, CommandOutputEvent_Stream_value)
	proto.RegisterEnum("stonesthrow.GitBranchTaskEvent_Result", GitBranchTaskEvent_Result_name, GitBranchTaskEvent_Result_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BuildHost service

type BuildHostClient interface {
	RunScriptCommand(ctx context.Context, in *RunOptions, opts ...grpc.CallOption) (BuildHost_RunScriptCommandClient, error)
	ListScriptCommands(ctx context.Context, in *ListCommandsOptions, opts ...grpc.CallOption) (*CommandList, error)
	ListTargets(ctx context.Context, in *ListTargetsOptions, opts ...grpc.CallOption) (*TargetList, error)
	RunShellCommand(ctx context.Context, in *RunOptions, opts ...grpc.CallOption) (BuildHost_RunShellCommandClient, error)
	FetchFile(ctx context.Context, in *FetchFileOptions, opts ...grpc.CallOption) (BuildHost_FetchFileClient, error)
}

type buildHostClient struct {
	cc *grpc.ClientConn
}

func NewBuildHostClient(cc *grpc.ClientConn) BuildHostClient {
	return &buildHostClient{cc}
}

func (c *buildHostClient) RunScriptCommand(ctx context.Context, in *RunOptions, opts ...grpc.CallOption) (BuildHost_RunScriptCommandClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BuildHost_serviceDesc.Streams[0], c.cc, "/stonesthrow.BuildHost/RunScriptCommand", opts...)
	if err != nil {
		return nil, err
	}
	x := &buildHostRunScriptCommandClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BuildHost_RunScriptCommandClient interface {
	Recv() (*JobEvent, error)
	grpc.ClientStream
}

type buildHostRunScriptCommandClient struct {
	grpc.ClientStream
}

func (x *buildHostRunScriptCommandClient) Recv() (*JobEvent, error) {
	m := new(JobEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *buildHostClient) ListScriptCommands(ctx context.Context, in *ListCommandsOptions, opts ...grpc.CallOption) (*CommandList, error) {
	out := new(CommandList)
	err := grpc.Invoke(ctx, "/stonesthrow.BuildHost/ListScriptCommands", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildHostClient) ListTargets(ctx context.Context, in *ListTargetsOptions, opts ...grpc.CallOption) (*TargetList, error) {
	out := new(TargetList)
	err := grpc.Invoke(ctx, "/stonesthrow.BuildHost/ListTargets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildHostClient) RunShellCommand(ctx context.Context, in *RunOptions, opts ...grpc.CallOption) (BuildHost_RunShellCommandClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BuildHost_serviceDesc.Streams[1], c.cc, "/stonesthrow.BuildHost/RunShellCommand", opts...)
	if err != nil {
		return nil, err
	}
	x := &buildHostRunShellCommandClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BuildHost_RunShellCommandClient interface {
	Recv() (*JobEvent, error)
	grpc.ClientStream
}

type buildHostRunShellCommandClient struct {
	grpc.ClientStream
}

func (x *buildHostRunShellCommandClient) Recv() (*JobEvent, error) {
	m := new(JobEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *buildHostClient) FetchFile(ctx context.Context, in *FetchFileOptions, opts ...grpc.CallOption) (BuildHost_FetchFileClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BuildHost_serviceDesc.Streams[2], c.cc, "/stonesthrow.BuildHost/FetchFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &buildHostFetchFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BuildHost_FetchFileClient interface {
	Recv() (*JobEvent, error)
	grpc.ClientStream
}

type buildHostFetchFileClient struct {
	grpc.ClientStream
}

func (x *buildHostFetchFileClient) Recv() (*JobEvent, error) {
	m := new(JobEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for BuildHost service

type BuildHostServer interface {
	RunScriptCommand(*RunOptions, BuildHost_RunScriptCommandServer) error
	ListScriptCommands(context.Context, *ListCommandsOptions) (*CommandList, error)
	ListTargets(context.Context, *ListTargetsOptions) (*TargetList, error)
	RunShellCommand(*RunOptions, BuildHost_RunShellCommandServer) error
	FetchFile(*FetchFileOptions, BuildHost_FetchFileServer) error
}

func RegisterBuildHostServer(s *grpc.Server, srv BuildHostServer) {
	s.RegisterService(&_BuildHost_serviceDesc, srv)
}

func _BuildHost_RunScriptCommand_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RunOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BuildHostServer).RunScriptCommand(m, &buildHostRunScriptCommandServer{stream})
}

type BuildHost_RunScriptCommandServer interface {
	Send(*JobEvent) error
	grpc.ServerStream
}

type buildHostRunScriptCommandServer struct {
	grpc.ServerStream
}

func (x *buildHostRunScriptCommandServer) Send(m *JobEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _BuildHost_ListScriptCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommandsOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildHostServer).ListScriptCommands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stonesthrow.BuildHost/ListScriptCommands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildHostServer).ListScriptCommands(ctx, req.(*ListCommandsOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildHost_ListTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTargetsOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildHostServer).ListTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stonesthrow.BuildHost/ListTargets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildHostServer).ListTargets(ctx, req.(*ListTargetsOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildHost_RunShellCommand_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RunOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BuildHostServer).RunShellCommand(m, &buildHostRunShellCommandServer{stream})
}

type BuildHost_RunShellCommandServer interface {
	Send(*JobEvent) error
	grpc.ServerStream
}

type buildHostRunShellCommandServer struct {
	grpc.ServerStream
}

func (x *buildHostRunShellCommandServer) Send(m *JobEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _BuildHost_FetchFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchFileOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BuildHostServer).FetchFile(m, &buildHostFetchFileServer{stream})
}

type BuildHost_FetchFileServer interface {
	Send(*JobEvent) error
	grpc.ServerStream
}

type buildHostFetchFileServer struct {
	grpc.ServerStream
}

func (x *buildHostFetchFileServer) Send(m *JobEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _BuildHost_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stonesthrow.BuildHost",
	HandlerType: (*BuildHostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListScriptCommands",
			Handler:    _BuildHost_ListScriptCommands_Handler,
		},
		{
			MethodName: "ListTargets",
			Handler:    _BuildHost_ListTargets_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunScriptCommand",
			Handler:       _BuildHost_RunScriptCommand_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RunShellCommand",
			Handler:       _BuildHost_RunShellCommand_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FetchFile",
			Handler:       _BuildHost_FetchFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "st.proto",
}

// Client API for RepositoryHost service

type RepositoryHostClient interface {
	RunScriptCommand(ctx context.Context, in *RunOptions, opts ...grpc.CallOption) (RepositoryHost_RunScriptCommandClient, error)
	ListScriptCommands(ctx context.Context, in *ListCommandsOptions, opts ...grpc.CallOption) (*CommandList, error)
	RunShellCommand(ctx context.Context, in *RunOptions, opts ...grpc.CallOption) (RepositoryHost_RunShellCommandClient, error)
	GetBranchConfig(ctx context.Context, in *BranchConfigOptions, opts ...grpc.CallOption) (*GitRepositoryInfo, error)
	SetBranchConfig(ctx context.Context, in *GitRepositoryInfo, opts ...grpc.CallOption) (RepositoryHost_SetBranchConfigClient, error)
	PullFromUpstream(ctx context.Context, in *BranchList, opts ...grpc.CallOption) (RepositoryHost_PullFromUpstreamClient, error)
	PushToUpstream(ctx context.Context, in *BranchList, opts ...grpc.CallOption) (RepositoryHost_PushToUpstreamClient, error)
	Status(ctx context.Context, in *RepositoryState, opts ...grpc.CallOption) (RepositoryHost_StatusClient, error)
	SyncRemote(ctx context.Context, in *RepositoryState, opts ...grpc.CallOption) (RepositoryHost_SyncRemoteClient, error)
	PrepareForReceive(ctx context.Context, in *RepositoryState, opts ...grpc.CallOption) (RepositoryHost_PrepareForReceiveClient, error)
	FetchFile(ctx context.Context, in *FetchFileOptions, opts ...grpc.CallOption) (RepositoryHost_FetchFileClient, error)
}

type repositoryHostClient struct {
	cc *grpc.ClientConn
}

func NewRepositoryHostClient(cc *grpc.ClientConn) RepositoryHostClient {
	return &repositoryHostClient{cc}
}

func (c *repositoryHostClient) RunScriptCommand(ctx context.Context, in *RunOptions, opts ...grpc.CallOption) (RepositoryHost_RunScriptCommandClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RepositoryHost_serviceDesc.Streams[0], c.cc, "/stonesthrow.RepositoryHost/RunScriptCommand", opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryHostRunScriptCommandClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RepositoryHost_RunScriptCommandClient interface {
	Recv() (*JobEvent, error)
	grpc.ClientStream
}

type repositoryHostRunScriptCommandClient struct {
	grpc.ClientStream
}

func (x *repositoryHostRunScriptCommandClient) Recv() (*JobEvent, error) {
	m := new(JobEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *repositoryHostClient) ListScriptCommands(ctx context.Context, in *ListCommandsOptions, opts ...grpc.CallOption) (*CommandList, error) {
	out := new(CommandList)
	err := grpc.Invoke(ctx, "/stonesthrow.RepositoryHost/ListScriptCommands", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryHostClient) RunShellCommand(ctx context.Context, in *RunOptions, opts ...grpc.CallOption) (RepositoryHost_RunShellCommandClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RepositoryHost_serviceDesc.Streams[1], c.cc, "/stonesthrow.RepositoryHost/RunShellCommand", opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryHostRunShellCommandClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RepositoryHost_RunShellCommandClient interface {
	Recv() (*JobEvent, error)
	grpc.ClientStream
}

type repositoryHostRunShellCommandClient struct {
	grpc.ClientStream
}

func (x *repositoryHostRunShellCommandClient) Recv() (*JobEvent, error) {
	m := new(JobEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *repositoryHostClient) GetBranchConfig(ctx context.Context, in *BranchConfigOptions, opts ...grpc.CallOption) (*GitRepositoryInfo, error) {
	out := new(GitRepositoryInfo)
	err := grpc.Invoke(ctx, "/stonesthrow.RepositoryHost/GetBranchConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryHostClient) SetBranchConfig(ctx context.Context, in *GitRepositoryInfo, opts ...grpc.CallOption) (RepositoryHost_SetBranchConfigClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RepositoryHost_serviceDesc.Streams[2], c.cc, "/stonesthrow.RepositoryHost/SetBranchConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryHostSetBranchConfigClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RepositoryHost_SetBranchConfigClient interface {
	Recv() (*JobEvent, error)
	grpc.ClientStream
}

type repositoryHostSetBranchConfigClient struct {
	grpc.ClientStream
}

func (x *repositoryHostSetBranchConfigClient) Recv() (*JobEvent, error) {
	m := new(JobEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *repositoryHostClient) PullFromUpstream(ctx context.Context, in *BranchList, opts ...grpc.CallOption) (RepositoryHost_PullFromUpstreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RepositoryHost_serviceDesc.Streams[3], c.cc, "/stonesthrow.RepositoryHost/PullFromUpstream", opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryHostPullFromUpstreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RepositoryHost_PullFromUpstreamClient interface {
	Recv() (*JobEvent, error)
	grpc.ClientStream
}

type repositoryHostPullFromUpstreamClient struct {
	grpc.ClientStream
}

func (x *repositoryHostPullFromUpstreamClient) Recv() (*JobEvent, error) {
	m := new(JobEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *repositoryHostClient) PushToUpstream(ctx context.Context, in *BranchList, opts ...grpc.CallOption) (RepositoryHost_PushToUpstreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RepositoryHost_serviceDesc.Streams[4], c.cc, "/stonesthrow.RepositoryHost/PushToUpstream", opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryHostPushToUpstreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RepositoryHost_PushToUpstreamClient interface {
	Recv() (*JobEvent, error)
	grpc.ClientStream
}

type repositoryHostPushToUpstreamClient struct {
	grpc.ClientStream
}

func (x *repositoryHostPushToUpstreamClient) Recv() (*JobEvent, error) {
	m := new(JobEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *repositoryHostClient) Status(ctx context.Context, in *RepositoryState, opts ...grpc.CallOption) (RepositoryHost_StatusClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RepositoryHost_serviceDesc.Streams[5], c.cc, "/stonesthrow.RepositoryHost/Status", opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryHostStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RepositoryHost_StatusClient interface {
	Recv() (*JobEvent, error)
	grpc.ClientStream
}

type repositoryHostStatusClient struct {
	grpc.ClientStream
}

func (x *repositoryHostStatusClient) Recv() (*JobEvent, error) {
	m := new(JobEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *repositoryHostClient) SyncRemote(ctx context.Context, in *RepositoryState, opts ...grpc.CallOption) (RepositoryHost_SyncRemoteClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RepositoryHost_serviceDesc.Streams[6], c.cc, "/stonesthrow.RepositoryHost/SyncRemote", opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryHostSyncRemoteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RepositoryHost_SyncRemoteClient interface {
	Recv() (*JobEvent, error)
	grpc.ClientStream
}

type repositoryHostSyncRemoteClient struct {
	grpc.ClientStream
}

func (x *repositoryHostSyncRemoteClient) Recv() (*JobEvent, error) {
	m := new(JobEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *repositoryHostClient) PrepareForReceive(ctx context.Context, in *RepositoryState, opts ...grpc.CallOption) (RepositoryHost_PrepareForReceiveClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RepositoryHost_serviceDesc.Streams[7], c.cc, "/stonesthrow.RepositoryHost/PrepareForReceive", opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryHostPrepareForReceiveClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RepositoryHost_PrepareForReceiveClient interface {
	Recv() (*JobEvent, error)
	grpc.ClientStream
}

type repositoryHostPrepareForReceiveClient struct {
	grpc.ClientStream
}

func (x *repositoryHostPrepareForReceiveClient) Recv() (*JobEvent, error) {
	m := new(JobEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *repositoryHostClient) FetchFile(ctx context.Context, in *FetchFileOptions, opts ...grpc.CallOption) (RepositoryHost_FetchFileClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RepositoryHost_serviceDesc.Streams[8], c.cc, "/stonesthrow.RepositoryHost/FetchFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryHostFetchFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RepositoryHost_FetchFileClient interface {
	Recv() (*JobEvent, error)
	grpc.ClientStream
}

type repositoryHostFetchFileClient struct {
	grpc.ClientStream
}

func (x *repositoryHostFetchFileClient) Recv() (*JobEvent, error) {
	m := new(JobEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for RepositoryHost service

type RepositoryHostServer interface {
	RunScriptCommand(*RunOptions, RepositoryHost_RunScriptCommandServer) error
	ListScriptCommands(context.Context, *ListCommandsOptions) (*CommandList, error)
	RunShellCommand(*RunOptions, RepositoryHost_RunShellCommandServer) error
	GetBranchConfig(context.Context, *BranchConfigOptions) (*GitRepositoryInfo, error)
	SetBranchConfig(*GitRepositoryInfo, RepositoryHost_SetBranchConfigServer) error
	PullFromUpstream(*BranchList, RepositoryHost_PullFromUpstreamServer) error
	PushToUpstream(*BranchList, RepositoryHost_PushToUpstreamServer) error
	Status(*RepositoryState, RepositoryHost_StatusServer) error
	SyncRemote(*RepositoryState, RepositoryHost_SyncRemoteServer) error
	PrepareForReceive(*RepositoryState, RepositoryHost_PrepareForReceiveServer) error
	FetchFile(*FetchFileOptions, RepositoryHost_FetchFileServer) error
}

func RegisterRepositoryHostServer(s *grpc.Server, srv RepositoryHostServer) {
	s.RegisterService(&_RepositoryHost_serviceDesc, srv)
}

func _RepositoryHost_RunScriptCommand_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RunOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepositoryHostServer).RunScriptCommand(m, &repositoryHostRunScriptCommandServer{stream})
}

type RepositoryHost_RunScriptCommandServer interface {
	Send(*JobEvent) error
	grpc.ServerStream
}

type repositoryHostRunScriptCommandServer struct {
	grpc.ServerStream
}

func (x *repositoryHostRunScriptCommandServer) Send(m *JobEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _RepositoryHost_ListScriptCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommandsOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryHostServer).ListScriptCommands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stonesthrow.RepositoryHost/ListScriptCommands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryHostServer).ListScriptCommands(ctx, req.(*ListCommandsOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryHost_RunShellCommand_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RunOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepositoryHostServer).RunShellCommand(m, &repositoryHostRunShellCommandServer{stream})
}

type RepositoryHost_RunShellCommandServer interface {
	Send(*JobEvent) error
	grpc.ServerStream
}

type repositoryHostRunShellCommandServer struct {
	grpc.ServerStream
}

func (x *repositoryHostRunShellCommandServer) Send(m *JobEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _RepositoryHost_GetBranchConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BranchConfigOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryHostServer).GetBranchConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stonesthrow.RepositoryHost/GetBranchConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryHostServer).GetBranchConfig(ctx, req.(*BranchConfigOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryHost_SetBranchConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GitRepositoryInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepositoryHostServer).SetBranchConfig(m, &repositoryHostSetBranchConfigServer{stream})
}

type RepositoryHost_SetBranchConfigServer interface {
	Send(*JobEvent) error
	grpc.ServerStream
}

type repositoryHostSetBranchConfigServer struct {
	grpc.ServerStream
}

func (x *repositoryHostSetBranchConfigServer) Send(m *JobEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _RepositoryHost_PullFromUpstream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BranchList)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepositoryHostServer).PullFromUpstream(m, &repositoryHostPullFromUpstreamServer{stream})
}

type RepositoryHost_PullFromUpstreamServer interface {
	Send(*JobEvent) error
	grpc.ServerStream
}

type repositoryHostPullFromUpstreamServer struct {
	grpc.ServerStream
}

func (x *repositoryHostPullFromUpstreamServer) Send(m *JobEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _RepositoryHost_PushToUpstream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BranchList)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepositoryHostServer).PushToUpstream(m, &repositoryHostPushToUpstreamServer{stream})
}

type RepositoryHost_PushToUpstreamServer interface {
	Send(*JobEvent) error
	grpc.ServerStream
}

type repositoryHostPushToUpstreamServer struct {
	grpc.ServerStream
}

func (x *repositoryHostPushToUpstreamServer) Send(m *JobEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _RepositoryHost_Status_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RepositoryState)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepositoryHostServer).Status(m, &repositoryHostStatusServer{stream})
}

type RepositoryHost_StatusServer interface {
	Send(*JobEvent) error
	grpc.ServerStream
}

type repositoryHostStatusServer struct {
	grpc.ServerStream
}

func (x *repositoryHostStatusServer) Send(m *JobEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _RepositoryHost_SyncRemote_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RepositoryState)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepositoryHostServer).SyncRemote(m, &repositoryHostSyncRemoteServer{stream})
}

type RepositoryHost_SyncRemoteServer interface {
	Send(*JobEvent) error
	grpc.ServerStream
}

type repositoryHostSyncRemoteServer struct {
	grpc.ServerStream
}

func (x *repositoryHostSyncRemoteServer) Send(m *JobEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _RepositoryHost_PrepareForReceive_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RepositoryState)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepositoryHostServer).PrepareForReceive(m, &repositoryHostPrepareForReceiveServer{stream})
}

type RepositoryHost_PrepareForReceiveServer interface {
	Send(*JobEvent) error
	grpc.ServerStream
}

type repositoryHostPrepareForReceiveServer struct {
	grpc.ServerStream
}

func (x *repositoryHostPrepareForReceiveServer) Send(m *JobEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _RepositoryHost_FetchFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchFileOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepositoryHostServer).FetchFile(m, &repositoryHostFetchFileServer{stream})
}

type RepositoryHost_FetchFileServer interface {
	Send(*JobEvent) error
	grpc.ServerStream
}

type repositoryHostFetchFileServer struct {
	grpc.ServerStream
}

func (x *repositoryHostFetchFileServer) Send(m *JobEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _RepositoryHost_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stonesthrow.RepositoryHost",
	HandlerType: (*RepositoryHostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListScriptCommands",
			Handler:    _RepositoryHost_ListScriptCommands_Handler,
		},
		{
			MethodName: "GetBranchConfig",
			Handler:    _RepositoryHost_GetBranchConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunScriptCommand",
			Handler:       _RepositoryHost_RunScriptCommand_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RunShellCommand",
			Handler:       _RepositoryHost_RunShellCommand_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetBranchConfig",
			Handler:       _RepositoryHost_SetBranchConfig_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PullFromUpstream",
			Handler:       _RepositoryHost_PullFromUpstream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PushToUpstream",
			Handler:       _RepositoryHost_PushToUpstream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Status",
			Handler:       _RepositoryHost_Status_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SyncRemote",
			Handler:       _RepositoryHost_SyncRemote_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PrepareForReceive",
			Handler:       _RepositoryHost_PrepareForReceive_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FetchFile",
			Handler:       _RepositoryHost_FetchFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "st.proto",
}

// Client API for ServiceHost service

type ServiceHostClient interface {
	Ping(ctx context.Context, in *PingOptions, opts ...grpc.CallOption) (*PingResult, error)
	ListJobs(ctx context.Context, in *ListJobsOptions, opts ...grpc.CallOption) (*BuilderJobs, error)
	KillJobs(ctx context.Context, in *KillJobsOptions, opts ...grpc.CallOption) (ServiceHost_KillJobsClient, error)
	Shutdown(ctx context.Context, in *ShutdownOptions, opts ...grpc.CallOption) (ServiceHost_ShutdownClient, error)
	SelfUpdate(ctx context.Context, in *SelfUpdateOptions, opts ...grpc.CallOption) (ServiceHost_SelfUpdateClient, error)
}

type serviceHostClient struct {
	cc *grpc.ClientConn
}

func NewServiceHostClient(cc *grpc.ClientConn) ServiceHostClient {
	return &serviceHostClient{cc}
}

func (c *serviceHostClient) Ping(ctx context.Context, in *PingOptions, opts ...grpc.CallOption) (*PingResult, error) {
	out := new(PingResult)
	err := grpc.Invoke(ctx, "/stonesthrow.ServiceHost/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceHostClient) ListJobs(ctx context.Context, in *ListJobsOptions, opts ...grpc.CallOption) (*BuilderJobs, error) {
	out := new(BuilderJobs)
	err := grpc.Invoke(ctx, "/stonesthrow.ServiceHost/ListJobs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceHostClient) KillJobs(ctx context.Context, in *KillJobsOptions, opts ...grpc.CallOption) (ServiceHost_KillJobsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ServiceHost_serviceDesc.Streams[0], c.cc, "/stonesthrow.ServiceHost/KillJobs", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceHostKillJobsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServiceHost_KillJobsClient interface {
	Recv() (*JobEvent, error)
	grpc.ClientStream
}

type serviceHostKillJobsClient struct {
	grpc.ClientStream
}

func (x *serviceHostKillJobsClient) Recv() (*JobEvent, error) {
	m := new(JobEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceHostClient) Shutdown(ctx context.Context, in *ShutdownOptions, opts ...grpc.CallOption) (ServiceHost_ShutdownClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ServiceHost_serviceDesc.Streams[1], c.cc, "/stonesthrow.ServiceHost/Shutdown", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceHostShutdownClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServiceHost_ShutdownClient interface {
	Recv() (*JobEvent, error)
	grpc.ClientStream
}

type serviceHostShutdownClient struct {
	grpc.ClientStream
}

func (x *serviceHostShutdownClient) Recv() (*JobEvent, error) {
	m := new(JobEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceHostClient) SelfUpdate(ctx context.Context, in *SelfUpdateOptions, opts ...grpc.CallOption) (ServiceHost_SelfUpdateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ServiceHost_serviceDesc.Streams[2], c.cc, "/stonesthrow.ServiceHost/SelfUpdate", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceHostSelfUpdateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServiceHost_SelfUpdateClient interface {
	Recv() (*JobEvent, error)
	grpc.ClientStream
}

type serviceHostSelfUpdateClient struct {
	grpc.ClientStream
}

func (x *serviceHostSelfUpdateClient) Recv() (*JobEvent, error) {
	m := new(JobEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ServiceHost service

type ServiceHostServer interface {
	Ping(context.Context, *PingOptions) (*PingResult, error)
	ListJobs(context.Context, *ListJobsOptions) (*BuilderJobs, error)
	KillJobs(*KillJobsOptions, ServiceHost_KillJobsServer) error
	Shutdown(*ShutdownOptions, ServiceHost_ShutdownServer) error
	SelfUpdate(*SelfUpdateOptions, ServiceHost_SelfUpdateServer) error
}

func RegisterServiceHostServer(s *grpc.Server, srv ServiceHostServer) {
	s.RegisterService(&_ServiceHost_serviceDesc, srv)
}

func _ServiceHost_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceHostServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stonesthrow.ServiceHost/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceHostServer).Ping(ctx, req.(*PingOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceHost_ListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJobsOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceHostServer).ListJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stonesthrow.ServiceHost/ListJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceHostServer).ListJobs(ctx, req.(*ListJobsOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceHost_KillJobs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(KillJobsOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceHostServer).KillJobs(m, &serviceHostKillJobsServer{stream})
}

type ServiceHost_KillJobsServer interface {
	Send(*JobEvent) error
	grpc.ServerStream
}

type serviceHostKillJobsServer struct {
	grpc.ServerStream
}

func (x *serviceHostKillJobsServer) Send(m *JobEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _ServiceHost_Shutdown_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ShutdownOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceHostServer).Shutdown(m, &serviceHostShutdownServer{stream})
}

type ServiceHost_ShutdownServer interface {
	Send(*JobEvent) error
	grpc.ServerStream
}

type serviceHostShutdownServer struct {
	grpc.ServerStream
}

func (x *serviceHostShutdownServer) Send(m *JobEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _ServiceHost_SelfUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SelfUpdateOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceHostServer).SelfUpdate(m, &serviceHostSelfUpdateServer{stream})
}

type ServiceHost_SelfUpdateServer interface {
	Send(*JobEvent) error
	grpc.ServerStream
}

type serviceHostSelfUpdateServer struct {
	grpc.ServerStream
}

func (x *serviceHostSelfUpdateServer) Send(m *JobEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _ServiceHost_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stonesthrow.ServiceHost",
	HandlerType: (*ServiceHostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ServiceHost_Ping_Handler,
		},
		{
			MethodName: "ListJobs",
			Handler:    _ServiceHost_ListJobs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "KillJobs",
			Handler:       _ServiceHost_KillJobs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Shutdown",
			Handler:       _ServiceHost_Shutdown_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SelfUpdate",
			Handler:       _ServiceHost_SelfUpdate_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "st.proto",
}

func init() { proto.RegisterFile("st.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1753 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xcd, 0x72, 0x23, 0x49,
	0x11, 0x9e, 0x96, 0x2c, 0xb9, 0x95, 0xf2, 0x58, 0x52, 0xcd, 0xec, 0x8e, 0x56, 0x2c, 0x63, 0x6f,
	0x2f, 0xb0, 0xc3, 0x2e, 0xa1, 0x05, 0x4f, 0x40, 0x30, 0x43, 0x00, 0xe1, 0x1f, 0xd9, 0x33, 0xb3,
	0xc3, 0xda, 0x5b, 0xb2, 0x39, 0xec, 0x45, 0xd1, 0xea, 0x2e, 0x4b, 0xcd, 0xb4, 0xaa, 0x3a, 0xaa,
	0xaa, 0xbd, 0xe1, 0x3d, 0x73, 0xe0, 0xcc, 0x81, 0x20, 0x82, 0x3b, 0x07, 0x2e, 0x44, 0xf0, 0x0e,
	0xbc, 0x02, 0x11, 0xbc, 0x05, 0xc1, 0x81, 0x33, 0x51, 0x3f, 0xad, 0xfe, 0x91, 0x3d, 0xf6, 0x0e,
	0x73, 0xe0, 0x56, 0x99, 0x9d, 0xf9, 0x55, 0x66, 0x56, 0x66, 0x56, 0x56, 0x83, 0x2b, 0xe4, 0x30,
	0xe1, 0x4c, 0x32, 0xd4, 0x16, 0x92, 0x51, 0x22, 0xe4, 0x9c, 0xb3, 0xaf, 0x06, 0x0f, 0x67, 0x8c,
	0xcd, 0x62, 0xf2, 0xa9, 0xfe, 0x34, 0x4d, 0xcf, 0x3f, 0x0d, 0x53, 0xee, 0xcb, 0x88, 0x51, 0x23,
	0x3c, 0xd8, 0xaa, 0x7e, 0x97, 0xd1, 0x82, 0x08, 0xe9, 0x2f, 0x12, 0x23, 0xe0, 0x7d, 0x09, 0x1b,
	0xe3, 0x39, 0x89, 0xe3, 0x7d, 0xb6, 0x58, 0xf8, 0x34, 0x44, 0x7d, 0x58, 0x0f, 0xcc, 0xb2, 0xef,
	0x6c, 0xd7, 0x1f, 0xb5, 0x70, 0x46, 0xa2, 0xf7, 0xa1, 0x15, 0x46, 0x9c, 0x04, 0x92, 0xf1, 0xcb,
	0x7e, 0x6d, 0xdb, 0x79, 0xd4, 0xc2, 0x39, 0x03, 0x21, 0x58, 0x9b, 0x33, 0x21, 0xfb, 0x75, 0xfd,
	0x41, 0xaf, 0xbd, 0x5f, 0x41, 0x07, 0x93, 0x84, 0x89, 0x48, 0x49, 0x8c, 0xa5, 0x2f, 0x09, 0x7a,
	0x08, 0xc0, 0x97, 0x2c, 0x8b, 0x52, 0xe0, 0xa0, 0x01, 0xb8, 0x9c, 0x5c, 0x44, 0x22, 0x62, 0xd4,
	0x42, 0x2d, 0x69, 0xef, 0x0f, 0x0e, 0xb8, 0x38, 0xa5, 0x06, 0xe8, 0x09, 0x80, 0x90, 0x3e, 0x97,
	0x13, 0xe5, 0x50, 0xdf, 0xd9, 0x76, 0x1e, 0xb5, 0x77, 0x06, 0x43, 0xe3, 0xed, 0x30, 0xf3, 0x76,
	0x78, 0x9a, 0x79, 0x8b, 0x5b, 0x5a, 0x5a, 0xd1, 0xca, 0x45, 0x9e, 0x52, 0x1a, 0xd1, 0x99, 0x36,
	0xc0, 0xc5, 0x19, 0x89, 0x7e, 0x0c, 0x2e, 0xa1, 0xa1, 0x81, 0xac, 0xdf, 0x08, 0xb9, 0x4e, 0x68,
	0xa8, 0x28, 0xef, 0xdf, 0x0e, 0xc0, 0x5e, 0x1a, 0xc5, 0x21, 0xe1, 0x2f, 0xd8, 0x14, 0x6d, 0x42,
	0x2d, 0x0a, 0xb5, 0x49, 0x0d, 0x5c, 0x8b, 0x42, 0xf4, 0x38, 0x0f, 0x69, 0x4d, 0x83, 0xbe, 0x37,
	0x2c, 0x1c, 0xe1, 0xb0, 0x18, 0xfe, 0x3c, 0xda, 0x9f, 0x40, 0x43, 0x28, 0x47, 0xad, 0x1d, 0xef,
	0x94, 0x54, 0xb2, 0x28, 0x60, 0x23, 0x83, 0x9e, 0x42, 0x5b, 0x5c, 0x0a, 0x49, 0x16, 0xc6, 0xf4,
	0x35, 0xbb, 0x4b, 0xd5, 0xf4, 0x03, 0x9b, 0x1b, 0x18, 0x8c, 0xb4, 0x8e, 0xc6, 0x4f, 0xa0, 0x95,
	0x0a, 0xc2, 0x8d, 0x66, 0xe3, 0x26, 0x4d, 0x57, 0xc9, 0x6a, 0xa7, 0x9f, 0x42, 0x3b, 0xf7, 0x59,
	0xa0, 0x4f, 0x60, 0xed, 0x37, 0x6c, 0x2a, 0x74, 0xd2, 0xb4, 0x77, 0x1e, 0x94, 0xcc, 0xcd, 0xe5,
	0xb0, 0x16, 0xf2, 0xfe, 0xb2, 0x06, 0xbd, 0xa3, 0x48, 0xe6, 0xc9, 0xf1, 0x9c, 0x9e, 0xb3, 0x4a,
	0x6e, 0x38, 0x2b, 0xb9, 0xb1, 0x0b, 0xee, 0x94, 0xfb, 0x34, 0x98, 0x13, 0xd1, 0xaf, 0xe9, 0x6d,
	0xbe, 0x5b, 0xda, 0x66, 0x05, 0x71, 0xb8, 0xa7, 0xc5, 0xf1, 0x52, 0x0d, 0x8d, 0xa0, 0x95, 0x26,
	0x42, 0x72, 0xe2, 0x2f, 0x44, 0xbf, 0xae, 0x31, 0x3e, 0xba, 0x01, 0xe3, 0xcc, 0xca, 0xe3, 0x5c,
	0x73, 0xf0, 0xfb, 0x1a, 0x34, 0x0d, 0xb6, 0xca, 0x7b, 0xea, 0xdb, 0x0c, 0x6c, 0x61, 0xbd, 0x2e,
	0x25, 0x71, 0xad, 0x9c, 0xc4, 0xe8, 0x23, 0xe8, 0x64, 0x6b, 0x31, 0xf1, 0xe7, 0xc4, 0x0f, 0xf5,
	0x09, 0x37, 0xf0, 0xe6, 0x92, 0xbd, 0xab, 0xb8, 0xe8, 0xfb, 0xd0, 0xcd, 0x05, 0xa7, 0x64, 0x1e,
	0xd1, 0x50, 0x1f, 0x6c, 0x03, 0xe7, 0x00, 0x7b, 0x9a, 0x8d, 0x9e, 0x43, 0x33, 0x60, 0xf4, 0x3c,
	0x9a, 0xf5, 0x1b, 0xda, 0xa5, 0x1f, 0xdd, 0x2a, 0x2c, 0xc3, 0x7d, 0xad, 0x33, 0xa2, 0x92, 0x5f,
	0x62, 0x0b, 0x30, 0x78, 0x02, 0xed, 0x02, 0x1b, 0x75, 0xa1, 0xfe, 0x8a, 0x64, 0x67, 0xa1, 0x96,
	0xe8, 0x3e, 0x34, 0x2e, 0xfc, 0x38, 0x25, 0xd6, 0x31, 0x43, 0x3c, 0xad, 0xfd, 0xd4, 0x19, 0xfc,
	0x1a, 0xdc, 0x2c, 0x56, 0x57, 0x46, 0xe5, 0x3d, 0x70, 0x93, 0x54, 0xcc, 0x27, 0x29, 0x8f, 0xad,
	0xf2, 0xba, 0xa2, 0xcf, 0x78, 0x8c, 0xbe, 0x05, 0xad, 0x73, 0x22, 0x03, 0xf3, 0xcd, 0x96, 0xbd,
	0x66, 0x9c, 0xf1, 0xd8, 0xfb, 0xa3, 0x03, 0xee, 0x4b, 0x36, 0x1b, 0x5d, 0x10, 0x2a, 0x97, 0x6d,
	0xc6, 0xc9, 0xdb, 0x8c, 0x32, 0x72, 0x21, 0x66, 0x16, 0x53, 0x2d, 0xd1, 0x53, 0x70, 0x05, 0xb9,
	0x20, 0x3c, 0x92, 0x97, 0x1a, 0x6e, 0x73, 0xe7, 0x61, 0x29, 0x24, 0x19, 0xdc, 0x70, 0x6c, 0xa5,
	0xf0, 0x52, 0xde, 0xfb, 0x18, 0xdc, 0x8c, 0x8b, 0x5a, 0xd0, 0x18, 0x61, 0x7c, 0x8c, 0xbb, 0x77,
	0x90, 0x0b, 0x6b, 0xcf, 0x3f, 0x3f, 0x3c, 0xee, 0x3a, 0x8a, 0x79, 0x30, 0xda, 0x3b, 0x3b, 0xea,
	0xd6, 0xbc, 0x67, 0xd0, 0xdb, 0x23, 0xb3, 0x88, 0xda, 0xea, 0x35, 0x26, 0x3e, 0x2e, 0x76, 0xd0,
	0x5b, 0x96, 0xbb, 0xf7, 0x3b, 0x07, 0x90, 0x65, 0x1e, 0xa7, 0x32, 0x49, 0xa5, 0xc1, 0xfa, 0x05,
	0x34, 0x4d, 0x44, 0x35, 0xd4, 0xe6, 0xce, 0xf7, 0x4a, 0x50, 0xab, 0x0a, 0xc3, 0xb1, 0xc9, 0x55,
	0xab, 0x85, 0xde, 0x85, 0x26, 0xd3, 0x5f, 0x6d, 0x74, 0x2c, 0xe5, 0x0d, 0xa0, 0x69, 0x24, 0xd1,
	0x3a, 0xd4, 0x8f, 0xcf, 0x4e, 0xbb, 0x77, 0xd4, 0x62, 0x84, 0x71, 0xd7, 0xf1, 0xfe, 0xec, 0x40,
	0x67, 0x44, 0xc3, 0x92, 0x4f, 0x5b, 0xd0, 0xe6, 0x44, 0xa6, 0x9c, 0x4e, 0x02, 0x16, 0x12, 0xdb,
	0xdb, 0xc0, 0xb0, 0xf6, 0x59, 0xb8, 0xd2, 0x81, 0x6a, 0x6f, 0xdc, 0x81, 0xea, 0xb7, 0xef, 0x40,
	0x7f, 0x77, 0x00, 0x1d, 0x45, 0xd2, 0x64, 0xf3, 0xa9, 0x2f, 0x5e, 0x19, 0x5b, 0xdf, 0x85, 0xa6,
	0xa9, 0x77, 0x9b, 0x24, 0x96, 0x52, 0xb1, 0xe4, 0x44, 0xa4, 0xb1, 0x89, 0x45, 0x35, 0x96, 0xab,
	0x40, 0x43, 0xac, 0xa5, 0xb1, 0xd5, 0x7a, 0xdd, 0xd5, 0xa4, 0xf6, 0xe4, 0xc4, 0x17, 0x8c, 0xea,
	0x12, 0x6d, 0x61, 0x4b, 0x79, 0x1f, 0x42, 0xd3, 0xa0, 0xa0, 0xbb, 0xd0, 0x1a, 0x9f, 0xed, 0xef,
	0x8f, 0x46, 0x07, 0xa3, 0x83, 0xee, 0x1d, 0x04, 0xd0, 0x3c, 0xdc, 0x7d, 0xfe, 0x72, 0x74, 0xd0,
	0x75, 0xbc, 0x47, 0x80, 0xbe, 0x8c, 0x92, 0x84, 0x84, 0xfb, 0x8c, 0x4a, 0x42, 0xe5, 0x32, 0xd3,
	0x43, 0x5f, 0xfa, 0xda, 0x89, 0x0d, 0xac, 0xd7, 0xde, 0xbf, 0xea, 0xe0, 0xbe, 0x60, 0x53, 0x23,
	0x30, 0x84, 0xb5, 0x5b, 0xde, 0x7d, 0x5a, 0x0e, 0xed, 0x40, 0x2b, 0x66, 0xb3, 0x09, 0x51, 0xca,
	0xf6, 0x80, 0xde, 0xb9, 0xb2, 0x2a, 0xb0, 0x1b, 0x67, 0xe5, 0xf6, 0x39, 0xdc, 0x9b, 0xaa, 0x04,
	0x9f, 0xd8, 0x3c, 0xb5, 0xda, 0xe6, 0x90, 0xca, 0x35, 0xb5, 0x52, 0x08, 0xb8, 0x37, 0x5d, 0xa9,
	0x8d, 0x2f, 0xe0, 0x7e, 0x86, 0x64, 0x32, 0xd1, 0x02, 0x9a, 0x1b, 0x6b, 0xeb, 0x86, 0xec, 0xc6,
	0x28, 0x58, 0x2d, 0x91, 0x67, 0xd0, 0x53, 0x77, 0x76, 0xd9, 0x40, 0x73, 0x8f, 0xbd, 0x5f, 0xc2,
	0xab, 0xe4, 0x34, 0xee, 0x90, 0x4a, 0x92, 0x7f, 0x06, 0x3d, 0x93, 0x2a, 0x13, 0xe9, 0x8b, 0x57,
	0x16, 0xa9, 0x79, 0x85, 0x65, 0xab, 0xb9, 0x82, 0x3b, 0xd3, 0x4a, 0x16, 0x1e, 0xc2, 0xe6, 0xd7,
	0xfa, 0x50, 0x27, 0x81, 0x39, 0xd5, 0xfe, 0xfa, 0x15, 0x48, 0xab, 0xe7, 0x8e, 0xef, 0x7e, 0x5d,
	0xe4, 0x79, 0x07, 0x00, 0x66, 0xaf, 0x97, 0x91, 0x90, 0x37, 0x5e, 0x91, 0x79, 0xee, 0xd7, 0xf4,
	0xf0, 0x66, 0x29, 0xef, 0x1f, 0x0e, 0x00, 0x4e, 0xe9, 0x71, 0xa2, 0x4a, 0x48, 0xdc, 0x08, 0xf3,
	0xba, 0x0b, 0x6c, 0x00, 0x6e, 0x12, 0xfb, 0xf2, 0x9c, 0xf1, 0x45, 0x56, 0x06, 0x19, 0x8d, 0x7e,
	0x06, 0x1b, 0x21, 0x49, 0x08, 0x0d, 0x09, 0x0d, 0x22, 0x22, 0xec, 0xb1, 0x96, 0x87, 0x81, 0x53,
	0x9f, 0xcf, 0x88, 0x54, 0xde, 0xe0, 0x92, 0x70, 0xb1, 0x6f, 0x36, 0x6e, 0xdd, 0x37, 0x3f, 0x80,
	0xf6, 0x49, 0x44, 0x67, 0x99, 0x63, 0x08, 0xd6, 0x12, 0x35, 0xd7, 0xd9, 0xeb, 0x41, 0xad, 0xbd,
	0x6d, 0x00, 0x25, 0x62, 0xeb, 0x50, 0x49, 0xb0, 0x82, 0x04, 0xa3, 0x33, 0xef, 0x6f, 0x0e, 0x74,
	0x0f, 0xd5, 0x75, 0x73, 0x18, 0xc5, 0xe4, 0x1b, 0xc4, 0x68, 0x19, 0x87, 0x5a, 0x25, 0x0e, 0x1f,
	0xc2, 0x5d, 0x4e, 0x62, 0x5f, 0x46, 0x17, 0x64, 0x92, 0xf8, 0x72, 0x6e, 0x03, 0xb5, 0x91, 0x31,
	0x4f, 0x7c, 0x39, 0x57, 0x42, 0xe7, 0x51, 0x4c, 0xd4, 0xdd, 0x38, 0x99, 0xc5, 0x6c, 0x6a, 0x5b,
	0xc7, 0x46, 0xc6, 0x3c, 0x8a, 0xd9, 0x54, 0xcf, 0xaa, 0x24, 0x48, 0xb9, 0x30, 0xb3, 0x99, 0x9a,
	0x55, 0x0d, 0xe9, 0xfd, 0xd6, 0x81, 0x7b, 0x26, 0x33, 0xcc, 0x85, 0x7d, 0x5b, 0xbb, 0xb7, 0xa0,
	0x6d, 0xb3, 0x5c, 0x24, 0x24, 0xc8, 0x46, 0x70, 0xc3, 0x1a, 0x27, 0x24, 0x40, 0x3f, 0x00, 0x14,
	0xd1, 0x20, 0x4e, 0x43, 0x32, 0x99, 0x45, 0x72, 0x62, 0x27, 0x8b, 0xba, 0xde, 0xbd, 0x6b, 0xbf,
	0x1c, 0x45, 0xd2, 0xec, 0xea, 0x7d, 0x01, 0xf7, 0xd4, 0x59, 0xda, 0x83, 0x11, 0x6f, 0x21, 0x7a,
	0xde, 0x9f, 0x1c, 0x58, 0xcf, 0x9e, 0x23, 0xf9, 0x20, 0x51, 0x5f, 0x0e, 0x12, 0xdb, 0xd0, 0x0e,
	0x89, 0x08, 0x78, 0xa4, 0xf7, 0xb2, 0xea, 0x45, 0x96, 0x1a, 0x52, 0x52, 0xe1, 0xcf, 0x88, 0x8d,
	0xbb, 0x21, 0xd0, 0xc7, 0xd0, 0x33, 0x09, 0x27, 0x26, 0x8c, 0x4e, 0x04, 0x4b, 0x79, 0x60, 0x66,
	0x65, 0x17, 0x77, 0xec, 0x87, 0x63, 0x3a, 0xd6, 0x6c, 0x15, 0x77, 0x95, 0xef, 0xd3, 0x78, 0x19,
	0x77, 0x4b, 0x7a, 0x3f, 0x57, 0x13, 0x92, 0x36, 0x4e, 0x57, 0xe4, 0xb0, 0xfc, 0x5e, 0x6a, 0xef,
	0xdc, 0xbf, 0xaa, 0x89, 0xe5, 0x09, 0x7b, 0x02, 0x48, 0xe9, 0x99, 0x2a, 0x78, 0x2b, 0xe1, 0xfa,
	0x0e, 0x40, 0x5e, 0x53, 0xaa, 0x03, 0x48, 0x4d, 0xd9, 0x90, 0x59, 0xca, 0xeb, 0x41, 0x47, 0x7d,
	0x57, 0xb3, 0xba, 0xdd, 0xd4, 0xfb, 0x00, 0x3a, 0x9f, 0x45, 0x71, 0x5c, 0x60, 0x2d, 0x9f, 0x2e,
	0x75, 0xf3, 0x74, 0x51, 0x5a, 0xe3, 0x79, 0x2a, 0x43, 0xf6, 0x55, 0xd6, 0x3b, 0xbc, 0x7b, 0xd0,
	0x1b, 0x93, 0xf8, 0xfc, 0x2c, 0x09, 0x7d, 0x99, 0x15, 0xcb, 0xce, 0x7f, 0x6a, 0xd0, 0xd2, 0x53,
	0xfe, 0x33, 0x35, 0x90, 0x1d, 0x40, 0x57, 0xbd, 0x50, 0xf4, 0x71, 0x64, 0x07, 0xf9, 0xa0, 0xfa,
	0x80, 0xb1, 0xaa, 0x83, 0xf2, 0x1d, 0x94, 0xdd, 0x6e, 0x3f, 0x74, 0x90, 0x8d, 0x54, 0x09, 0x46,
	0xa0, 0xed, 0xf2, 0x95, 0xb5, 0x9a, 0x7a, 0x83, 0xfe, 0x55, 0x07, 0xa0, 0x63, 0x73, 0x04, 0xed,
	0x42, 0xec, 0xd1, 0xd6, 0x0a, 0x54, 0xf9, 0x54, 0x06, 0xd7, 0x35, 0x2e, 0xb4, 0x0f, 0x1d, 0xe5,
	0x60, 0xf1, 0xdd, 0xfc, 0xcd, 0xfd, 0xdb, 0x87, 0xd6, 0xb2, 0xe9, 0xa0, 0x6f, 0x97, 0xa4, 0xaa,
	0xcd, 0xe8, 0x5a, 0x90, 0x9d, 0xbf, 0x36, 0x61, 0x33, 0x9f, 0xee, 0xff, 0xaf, 0xa3, 0xff, 0x56,
	0x82, 0x36, 0x86, 0xce, 0x11, 0x91, 0xc5, 0xbe, 0x57, 0xb1, 0xe9, 0x8a, 0x96, 0x38, 0x78, 0xf8,
	0xfa, 0xf7, 0x10, 0x7a, 0x01, 0x9d, 0x71, 0x05, 0xf4, 0x06, 0x95, 0xeb, 0x0d, 0x3c, 0x80, 0xee,
	0x49, 0x1a, 0xc7, 0x87, 0x9c, 0x2d, 0x96, 0xaf, 0xa1, 0x07, 0x57, 0x58, 0xa8, 0x42, 0x72, 0x3d,
	0xca, 0x1e, 0x6c, 0x9e, 0xa4, 0x62, 0x7e, 0xca, 0xfe, 0x07, 0x8c, 0x5f, 0xaa, 0x19, 0xdf, 0x97,
	0xa9, 0x40, 0xe5, 0x39, 0xa8, 0xf2, 0x4b, 0xe6, 0x75, 0x09, 0x0a, 0xe3, 0x4b, 0x1a, 0x60, 0xb2,
	0x60, 0x92, 0xbc, 0x29, 0xc8, 0x0b, 0xe8, 0x9d, 0x70, 0x92, 0xf8, 0x9c, 0x1c, 0x32, 0x8e, 0x49,
	0x40, 0xa2, 0x0b, 0xf2, 0xe6, 0x06, 0xbd, 0x85, 0x8a, 0xf9, 0x67, 0x0d, 0xda, 0x63, 0xc2, 0x2f,
	0xa2, 0x80, 0xe8, 0x72, 0x79, 0x02, 0x6b, 0x6a, 0x3c, 0x40, 0xe5, 0xc4, 0x2d, 0x0c, 0x15, 0x95,
	0x36, 0x50, 0x98, 0x25, 0xf6, 0xc0, 0xcd, 0x7a, 0x6a, 0xc5, 0xa5, 0x4a, 0xab, 0xad, 0x54, 0x45,
	0xf1, 0xbf, 0xc9, 0x2e, 0xb8, 0x59, 0x13, 0xae, 0x60, 0x54, 0x7a, 0xf3, 0xf5, 0x61, 0xd9, 0x05,
	0x37, 0x6b, 0xd2, 0x15, 0x88, 0x4a, 0xef, 0xbe, 0x1e, 0x62, 0x04, 0x90, 0x37, 0xf5, 0x4a, 0xf2,
	0xaf, 0x74, 0xfb, 0x6b, 0x61, 0xa6, 0x4d, 0xfd, 0xf8, 0x78, 0xfc, 0xdf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x99, 0x27, 0x21, 0xb0, 0xad, 0x14, 0x00, 0x00,
}
