// Code generated by protoc-gen-go.
// source: st.proto
// DO NOT EDIT!

/*
Package stonesthrow is a generated protocol buffer package.

It is generated from these files:
	st.proto

It has these top-level messages:
	ShellCommand
	ShellTask
	RepositoryState
	RunState
	BuilderJob
	BuilderJobs
	GitRepositoryInfo
	LogEvent
	BeginCommandEvent
	CommandOutputEvent
	EndCommandEvent
	GitBranchTaskEvent
	JobEvent
	BuildOptions
	TargetList
	BranchList
	RunOptions
*/
package stonesthrow

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/duration"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LogEvent_Severity int32

const (
	LogEvent_ERROR LogEvent_Severity = 0
	LogEvent_INFO  LogEvent_Severity = 1
	LogEvent_DEBUG LogEvent_Severity = 2
)

var LogEvent_Severity_name = map[int32]string{
	0: "ERROR",
	1: "INFO",
	2: "DEBUG",
}
var LogEvent_Severity_value = map[string]int32{
	"ERROR": 0,
	"INFO":  1,
	"DEBUG": 2,
}

func (x LogEvent_Severity) String() string {
	return proto.EnumName(LogEvent_Severity_name, int32(x))
}
func (LogEvent_Severity) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7, 0} }

type CommandOutputEvent_Stream int32

const (
	CommandOutputEvent_OUT CommandOutputEvent_Stream = 0
	CommandOutputEvent_ERR CommandOutputEvent_Stream = 1
)

var CommandOutputEvent_Stream_name = map[int32]string{
	0: "OUT",
	1: "ERR",
}
var CommandOutputEvent_Stream_value = map[string]int32{
	"OUT": 0,
	"ERR": 1,
}

func (x CommandOutputEvent_Stream) String() string {
	return proto.EnumName(CommandOutputEvent_Stream_name, int32(x))
}
func (CommandOutputEvent_Stream) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{9, 0} }

type GitBranchTaskEvent_Result int32

const (
	GitBranchTaskEvent_SUCCEEDED GitBranchTaskEvent_Result = 0
	GitBranchTaskEvent_FAILED    GitBranchTaskEvent_Result = 1
)

var GitBranchTaskEvent_Result_name = map[int32]string{
	0: "SUCCEEDED",
	1: "FAILED",
}
var GitBranchTaskEvent_Result_value = map[string]int32{
	"SUCCEEDED": 0,
	"FAILED":    1,
}

func (x GitBranchTaskEvent_Result) String() string {
	return proto.EnumName(GitBranchTaskEvent_Result_name, int32(x))
}
func (GitBranchTaskEvent_Result) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11, 0}
}

type ShellCommand struct {
	Command   []string `protobuf:"bytes,1,rep,name=command" json:"command,omitempty"`
	Directory string   `protobuf:"bytes,2,opt,name=directory" json:"directory,omitempty"`
	Host      string   `protobuf:"bytes,3,opt,name=host" json:"host,omitempty"`
}

func (m *ShellCommand) Reset()                    { *m = ShellCommand{} }
func (m *ShellCommand) String() string            { return proto.CompactTextString(m) }
func (*ShellCommand) ProtoMessage()               {}
func (*ShellCommand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ShellCommand) GetCommand() []string {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *ShellCommand) GetDirectory() string {
	if m != nil {
		return m.Directory
	}
	return ""
}

func (m *ShellCommand) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type ShellTask struct {
	Command    *ShellCommand             `protobuf:"bytes,1,opt,name=command" json:"command,omitempty"`
	State      *RunState                 `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
	SystemTime *google_protobuf.Duration `protobuf:"bytes,3,opt,name=system_time,json=systemTime" json:"system_time,omitempty"`
	UserTime   *google_protobuf.Duration `protobuf:"bytes,4,opt,name=user_time,json=userTime" json:"user_time,omitempty"`
}

func (m *ShellTask) Reset()                    { *m = ShellTask{} }
func (m *ShellTask) String() string            { return proto.CompactTextString(m) }
func (*ShellTask) ProtoMessage()               {}
func (*ShellTask) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ShellTask) GetCommand() *ShellCommand {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *ShellTask) GetState() *RunState {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *ShellTask) GetSystemTime() *google_protobuf.Duration {
	if m != nil {
		return m.SystemTime
	}
	return nil
}

func (m *ShellTask) GetUserTime() *google_protobuf.Duration {
	if m != nil {
		return m.UserTime
	}
	return nil
}

type RepositoryState struct {
	Repository string `protobuf:"bytes,2,opt,name=repository" json:"repository,omitempty"`
	Revision   string `protobuf:"bytes,3,opt,name=revision" json:"revision,omitempty"`
}

func (m *RepositoryState) Reset()                    { *m = RepositoryState{} }
func (m *RepositoryState) String() string            { return proto.CompactTextString(m) }
func (*RepositoryState) ProtoMessage()               {}
func (*RepositoryState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RepositoryState) GetRepository() string {
	if m != nil {
		return m.Repository
	}
	return ""
}

func (m *RepositoryState) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

type RunState struct {
	StartTime *google_protobuf1.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	Running   bool                        `protobuf:"varint,2,opt,name=running" json:"running,omitempty"`
	EndTime   *google_protobuf1.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
}

func (m *RunState) Reset()                    { *m = RunState{} }
func (m *RunState) String() string            { return proto.CompactTextString(m) }
func (*RunState) ProtoMessage()               {}
func (*RunState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RunState) GetStartTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *RunState) GetRunning() bool {
	if m != nil {
		return m.Running
	}
	return false
}

func (m *RunState) GetEndTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

type BuilderJob struct {
	Id              int32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Request         string           `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
	RepositoryState *RepositoryState `protobuf:"bytes,3,opt,name=repository_state,json=repositoryState" json:"repository_state,omitempty"`
	RunState        *RunState        `protobuf:"bytes,4,opt,name=run_state,json=runState" json:"run_state,omitempty"`
	ShellTasks      []*ShellTask     `protobuf:"bytes,5,rep,name=shell_tasks,json=shellTasks" json:"shell_tasks,omitempty"`
}

func (m *BuilderJob) Reset()                    { *m = BuilderJob{} }
func (m *BuilderJob) String() string            { return proto.CompactTextString(m) }
func (*BuilderJob) ProtoMessage()               {}
func (*BuilderJob) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BuilderJob) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BuilderJob) GetRequest() string {
	if m != nil {
		return m.Request
	}
	return ""
}

func (m *BuilderJob) GetRepositoryState() *RepositoryState {
	if m != nil {
		return m.RepositoryState
	}
	return nil
}

func (m *BuilderJob) GetRunState() *RunState {
	if m != nil {
		return m.RunState
	}
	return nil
}

func (m *BuilderJob) GetShellTasks() []*ShellTask {
	if m != nil {
		return m.ShellTasks
	}
	return nil
}

type BuilderJobs struct {
	Jobs []*BuilderJob `protobuf:"bytes,1,rep,name=jobs" json:"jobs,omitempty"`
}

func (m *BuilderJobs) Reset()                    { *m = BuilderJobs{} }
func (m *BuilderJobs) String() string            { return proto.CompactTextString(m) }
func (*BuilderJobs) ProtoMessage()               {}
func (*BuilderJobs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *BuilderJobs) GetJobs() []*BuilderJob {
	if m != nil {
		return m.Jobs
	}
	return nil
}

type GitRepositoryInfo struct {
	Branches  []*GitRepositoryInfo_Branch   `protobuf:"bytes,1,rep,name=branches" json:"branches,omitempty"`
	Upstreams []*GitRepositoryInfo_Upstream `protobuf:"bytes,2,rep,name=upstreams" json:"upstreams,omitempty"`
}

func (m *GitRepositoryInfo) Reset()                    { *m = GitRepositoryInfo{} }
func (m *GitRepositoryInfo) String() string            { return proto.CompactTextString(m) }
func (*GitRepositoryInfo) ProtoMessage()               {}
func (*GitRepositoryInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GitRepositoryInfo) GetBranches() []*GitRepositoryInfo_Branch {
	if m != nil {
		return m.Branches
	}
	return nil
}

func (m *GitRepositoryInfo) GetUpstreams() []*GitRepositoryInfo_Upstream {
	if m != nil {
		return m.Upstreams
	}
	return nil
}

type GitRepositoryInfo_Branch struct {
	Name            string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Revision        string            `protobuf:"bytes,2,opt,name=revision" json:"revision,omitempty"`
	RevisionsAhead  int32             `protobuf:"varint,3,opt,name=revisions_ahead,json=revisionsAhead" json:"revisions_ahead,omitempty"`
	RevisionsBehind int32             `protobuf:"varint,4,opt,name=revisions_behind,json=revisionsBehind" json:"revisions_behind,omitempty"`
	Config          map[string]string `protobuf:"bytes,5,rep,name=config" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GitRepositoryInfo_Branch) Reset()                    { *m = GitRepositoryInfo_Branch{} }
func (m *GitRepositoryInfo_Branch) String() string            { return proto.CompactTextString(m) }
func (*GitRepositoryInfo_Branch) ProtoMessage()               {}
func (*GitRepositoryInfo_Branch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 0} }

func (m *GitRepositoryInfo_Branch) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GitRepositoryInfo_Branch) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

func (m *GitRepositoryInfo_Branch) GetRevisionsAhead() int32 {
	if m != nil {
		return m.RevisionsAhead
	}
	return 0
}

func (m *GitRepositoryInfo_Branch) GetRevisionsBehind() int32 {
	if m != nil {
		return m.RevisionsBehind
	}
	return 0
}

func (m *GitRepositoryInfo_Branch) GetConfig() map[string]string {
	if m != nil {
		return m.Config
	}
	return nil
}

type GitRepositoryInfo_Upstream struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	PushUrl  string `protobuf:"bytes,2,opt,name=push_url,json=pushUrl" json:"push_url,omitempty"`
	FetchUrl string `protobuf:"bytes,3,opt,name=fetch_url,json=fetchUrl" json:"fetch_url,omitempty"`
}

func (m *GitRepositoryInfo_Upstream) Reset()                    { *m = GitRepositoryInfo_Upstream{} }
func (m *GitRepositoryInfo_Upstream) String() string            { return proto.CompactTextString(m) }
func (*GitRepositoryInfo_Upstream) ProtoMessage()               {}
func (*GitRepositoryInfo_Upstream) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 1} }

func (m *GitRepositoryInfo_Upstream) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GitRepositoryInfo_Upstream) GetPushUrl() string {
	if m != nil {
		return m.PushUrl
	}
	return ""
}

func (m *GitRepositoryInfo_Upstream) GetFetchUrl() string {
	if m != nil {
		return m.FetchUrl
	}
	return ""
}

type LogEvent struct {
	Host     string            `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	Msg      string            `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	Severity LogEvent_Severity `protobuf:"varint,3,opt,name=severity,enum=stonesthrow.LogEvent_Severity" json:"severity,omitempty"`
}

func (m *LogEvent) Reset()                    { *m = LogEvent{} }
func (m *LogEvent) String() string            { return proto.CompactTextString(m) }
func (*LogEvent) ProtoMessage()               {}
func (*LogEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *LogEvent) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *LogEvent) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *LogEvent) GetSeverity() LogEvent_Severity {
	if m != nil {
		return m.Severity
	}
	return LogEvent_ERROR
}

type BeginCommandEvent struct {
	Command *ShellCommand `protobuf:"bytes,1,opt,name=command" json:"command,omitempty"`
}

func (m *BeginCommandEvent) Reset()                    { *m = BeginCommandEvent{} }
func (m *BeginCommandEvent) String() string            { return proto.CompactTextString(m) }
func (*BeginCommandEvent) ProtoMessage()               {}
func (*BeginCommandEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *BeginCommandEvent) GetCommand() *ShellCommand {
	if m != nil {
		return m.Command
	}
	return nil
}

type CommandOutputEvent struct {
	Stream CommandOutputEvent_Stream `protobuf:"varint,1,opt,name=stream,enum=stonesthrow.CommandOutputEvent_Stream" json:"stream,omitempty"`
	Output string                    `protobuf:"bytes,2,opt,name=output" json:"output,omitempty"`
}

func (m *CommandOutputEvent) Reset()                    { *m = CommandOutputEvent{} }
func (m *CommandOutputEvent) String() string            { return proto.CompactTextString(m) }
func (*CommandOutputEvent) ProtoMessage()               {}
func (*CommandOutputEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CommandOutputEvent) GetStream() CommandOutputEvent_Stream {
	if m != nil {
		return m.Stream
	}
	return CommandOutputEvent_OUT
}

func (m *CommandOutputEvent) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

type EndCommandEvent struct {
	ReturnCode int32                     `protobuf:"varint,1,opt,name=return_code,json=returnCode" json:"return_code,omitempty"`
	SystemTime *google_protobuf.Duration `protobuf:"bytes,2,opt,name=system_time,json=systemTime" json:"system_time,omitempty"`
	UserTime   *google_protobuf.Duration `protobuf:"bytes,3,opt,name=user_time,json=userTime" json:"user_time,omitempty"`
}

func (m *EndCommandEvent) Reset()                    { *m = EndCommandEvent{} }
func (m *EndCommandEvent) String() string            { return proto.CompactTextString(m) }
func (*EndCommandEvent) ProtoMessage()               {}
func (*EndCommandEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *EndCommandEvent) GetReturnCode() int32 {
	if m != nil {
		return m.ReturnCode
	}
	return 0
}

func (m *EndCommandEvent) GetSystemTime() *google_protobuf.Duration {
	if m != nil {
		return m.SystemTime
	}
	return nil
}

func (m *EndCommandEvent) GetUserTime() *google_protobuf.Duration {
	if m != nil {
		return m.UserTime
	}
	return nil
}

type GitBranchTaskEvent struct {
	Branch   string                    `protobuf:"bytes,1,opt,name=branch" json:"branch,omitempty"`
	Result   GitBranchTaskEvent_Result `protobuf:"varint,2,opt,name=result,enum=stonesthrow.GitBranchTaskEvent_Result" json:"result,omitempty"`
	Revision string                    `protobuf:"bytes,3,opt,name=revision" json:"revision,omitempty"`
	Reason   string                    `protobuf:"bytes,4,opt,name=reason" json:"reason,omitempty"`
}

func (m *GitBranchTaskEvent) Reset()                    { *m = GitBranchTaskEvent{} }
func (m *GitBranchTaskEvent) String() string            { return proto.CompactTextString(m) }
func (*GitBranchTaskEvent) ProtoMessage()               {}
func (*GitBranchTaskEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GitBranchTaskEvent) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *GitBranchTaskEvent) GetResult() GitBranchTaskEvent_Result {
	if m != nil {
		return m.Result
	}
	return GitBranchTaskEvent_SUCCEEDED
}

func (m *GitBranchTaskEvent) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

func (m *GitBranchTaskEvent) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type JobEvent struct {
	Time               *google_protobuf1.Timestamp `protobuf:"bytes,1,opt,name=time" json:"time,omitempty"`
	LogEvent           *LogEvent                   `protobuf:"bytes,2,opt,name=log_event,json=logEvent" json:"log_event,omitempty"`
	BeginCommandEvent  *BeginCommandEvent          `protobuf:"bytes,3,opt,name=begin_command_event,json=beginCommandEvent" json:"begin_command_event,omitempty"`
	CommandOutputEvent *CommandOutputEvent         `protobuf:"bytes,4,opt,name=command_output_event,json=commandOutputEvent" json:"command_output_event,omitempty"`
	EndCommandEvent    *EndCommandEvent            `protobuf:"bytes,5,opt,name=end_command_event,json=endCommandEvent" json:"end_command_event,omitempty"`
	BranchTaskEvent    *GitBranchTaskEvent         `protobuf:"bytes,6,opt,name=branch_task_event,json=branchTaskEvent" json:"branch_task_event,omitempty"`
}

func (m *JobEvent) Reset()                    { *m = JobEvent{} }
func (m *JobEvent) String() string            { return proto.CompactTextString(m) }
func (*JobEvent) ProtoMessage()               {}
func (*JobEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *JobEvent) GetTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *JobEvent) GetLogEvent() *LogEvent {
	if m != nil {
		return m.LogEvent
	}
	return nil
}

func (m *JobEvent) GetBeginCommandEvent() *BeginCommandEvent {
	if m != nil {
		return m.BeginCommandEvent
	}
	return nil
}

func (m *JobEvent) GetCommandOutputEvent() *CommandOutputEvent {
	if m != nil {
		return m.CommandOutputEvent
	}
	return nil
}

func (m *JobEvent) GetEndCommandEvent() *EndCommandEvent {
	if m != nil {
		return m.EndCommandEvent
	}
	return nil
}

func (m *JobEvent) GetBranchTaskEvent() *GitBranchTaskEvent {
	if m != nil {
		return m.BranchTaskEvent
	}
	return nil
}

type BuildOptions struct {
	Targets         []string         `protobuf:"bytes,1,rep,name=targets" json:"targets,omitempty"`
	RepositoryState *RepositoryState `protobuf:"bytes,2,opt,name=repository_state,json=repositoryState" json:"repository_state,omitempty"`
}

func (m *BuildOptions) Reset()                    { *m = BuildOptions{} }
func (m *BuildOptions) String() string            { return proto.CompactTextString(m) }
func (*BuildOptions) ProtoMessage()               {}
func (*BuildOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *BuildOptions) GetTargets() []string {
	if m != nil {
		return m.Targets
	}
	return nil
}

func (m *BuildOptions) GetRepositoryState() *RepositoryState {
	if m != nil {
		return m.RepositoryState
	}
	return nil
}

type TargetList struct {
	Target []string `protobuf:"bytes,1,rep,name=target" json:"target,omitempty"`
}

func (m *TargetList) Reset()                    { *m = TargetList{} }
func (m *TargetList) String() string            { return proto.CompactTextString(m) }
func (*TargetList) ProtoMessage()               {}
func (*TargetList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *TargetList) GetTarget() []string {
	if m != nil {
		return m.Target
	}
	return nil
}

type BranchList struct {
	Branch []string `protobuf:"bytes,1,rep,name=branch" json:"branch,omitempty"`
}

func (m *BranchList) Reset()                    { *m = BranchList{} }
func (m *BranchList) String() string            { return proto.CompactTextString(m) }
func (*BranchList) ProtoMessage()               {}
func (*BranchList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *BranchList) GetBranch() []string {
	if m != nil {
		return m.Branch
	}
	return nil
}

type RunOptions struct {
	Command         *ShellCommand    `protobuf:"bytes,1,opt,name=command" json:"command,omitempty"`
	Dependencies    *TargetList      `protobuf:"bytes,2,opt,name=dependencies" json:"dependencies,omitempty"`
	RepositoryState *RepositoryState `protobuf:"bytes,3,opt,name=repository_state,json=repositoryState" json:"repository_state,omitempty"`
}

func (m *RunOptions) Reset()                    { *m = RunOptions{} }
func (m *RunOptions) String() string            { return proto.CompactTextString(m) }
func (*RunOptions) ProtoMessage()               {}
func (*RunOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *RunOptions) GetCommand() *ShellCommand {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *RunOptions) GetDependencies() *TargetList {
	if m != nil {
		return m.Dependencies
	}
	return nil
}

func (m *RunOptions) GetRepositoryState() *RepositoryState {
	if m != nil {
		return m.RepositoryState
	}
	return nil
}

func init() {
	proto.RegisterType((*ShellCommand)(nil), "stonesthrow.ShellCommand")
	proto.RegisterType((*ShellTask)(nil), "stonesthrow.ShellTask")
	proto.RegisterType((*RepositoryState)(nil), "stonesthrow.RepositoryState")
	proto.RegisterType((*RunState)(nil), "stonesthrow.RunState")
	proto.RegisterType((*BuilderJob)(nil), "stonesthrow.BuilderJob")
	proto.RegisterType((*BuilderJobs)(nil), "stonesthrow.BuilderJobs")
	proto.RegisterType((*GitRepositoryInfo)(nil), "stonesthrow.GitRepositoryInfo")
	proto.RegisterType((*GitRepositoryInfo_Branch)(nil), "stonesthrow.GitRepositoryInfo.Branch")
	proto.RegisterType((*GitRepositoryInfo_Upstream)(nil), "stonesthrow.GitRepositoryInfo.Upstream")
	proto.RegisterType((*LogEvent)(nil), "stonesthrow.LogEvent")
	proto.RegisterType((*BeginCommandEvent)(nil), "stonesthrow.BeginCommandEvent")
	proto.RegisterType((*CommandOutputEvent)(nil), "stonesthrow.CommandOutputEvent")
	proto.RegisterType((*EndCommandEvent)(nil), "stonesthrow.EndCommandEvent")
	proto.RegisterType((*GitBranchTaskEvent)(nil), "stonesthrow.GitBranchTaskEvent")
	proto.RegisterType((*JobEvent)(nil), "stonesthrow.JobEvent")
	proto.RegisterType((*BuildOptions)(nil), "stonesthrow.BuildOptions")
	proto.RegisterType((*TargetList)(nil), "stonesthrow.TargetList")
	proto.RegisterType((*BranchList)(nil), "stonesthrow.BranchList")
	proto.RegisterType((*RunOptions)(nil), "stonesthrow.RunOptions")
	proto.RegisterEnum("stonesthrow.LogEvent_Severity", LogEvent_Severity_name, LogEvent_Severity_value)
	proto.RegisterEnum("stonesthrow.CommandOutputEvent_Stream", CommandOutputEvent_Stream_name, CommandOutputEvent_Stream_value)
	proto.RegisterEnum("stonesthrow.GitBranchTaskEvent_Result", GitBranchTaskEvent_Result_name, GitBranchTaskEvent_Result_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PlatformBuildHost service

type PlatformBuildHostClient interface {
	ListJobs(ctx context.Context, in *RepositoryState, opts ...grpc.CallOption) (*BuilderJobs, error)
	KillJobs(ctx context.Context, in *BuilderJobs, opts ...grpc.CallOption) (PlatformBuildHost_KillJobsClient, error)
	Build(ctx context.Context, in *BuildOptions, opts ...grpc.CallOption) (PlatformBuildHost_BuildClient, error)
	Run(ctx context.Context, in *RunOptions, opts ...grpc.CallOption) (PlatformBuildHost_RunClient, error)
	Clobber(ctx context.Context, in *RepositoryState, opts ...grpc.CallOption) (PlatformBuildHost_ClobberClient, error)
	Prepare(ctx context.Context, in *RepositoryState, opts ...grpc.CallOption) (PlatformBuildHost_PrepareClient, error)
	ListTargets(ctx context.Context, in *RepositoryState, opts ...grpc.CallOption) (*TargetList, error)
}

type platformBuildHostClient struct {
	cc *grpc.ClientConn
}

func NewPlatformBuildHostClient(cc *grpc.ClientConn) PlatformBuildHostClient {
	return &platformBuildHostClient{cc}
}

func (c *platformBuildHostClient) ListJobs(ctx context.Context, in *RepositoryState, opts ...grpc.CallOption) (*BuilderJobs, error) {
	out := new(BuilderJobs)
	err := grpc.Invoke(ctx, "/stonesthrow.PlatformBuildHost/ListJobs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformBuildHostClient) KillJobs(ctx context.Context, in *BuilderJobs, opts ...grpc.CallOption) (PlatformBuildHost_KillJobsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PlatformBuildHost_serviceDesc.Streams[0], c.cc, "/stonesthrow.PlatformBuildHost/KillJobs", opts...)
	if err != nil {
		return nil, err
	}
	x := &platformBuildHostKillJobsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PlatformBuildHost_KillJobsClient interface {
	Recv() (*JobEvent, error)
	grpc.ClientStream
}

type platformBuildHostKillJobsClient struct {
	grpc.ClientStream
}

func (x *platformBuildHostKillJobsClient) Recv() (*JobEvent, error) {
	m := new(JobEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *platformBuildHostClient) Build(ctx context.Context, in *BuildOptions, opts ...grpc.CallOption) (PlatformBuildHost_BuildClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PlatformBuildHost_serviceDesc.Streams[1], c.cc, "/stonesthrow.PlatformBuildHost/Build", opts...)
	if err != nil {
		return nil, err
	}
	x := &platformBuildHostBuildClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PlatformBuildHost_BuildClient interface {
	Recv() (*JobEvent, error)
	grpc.ClientStream
}

type platformBuildHostBuildClient struct {
	grpc.ClientStream
}

func (x *platformBuildHostBuildClient) Recv() (*JobEvent, error) {
	m := new(JobEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *platformBuildHostClient) Run(ctx context.Context, in *RunOptions, opts ...grpc.CallOption) (PlatformBuildHost_RunClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PlatformBuildHost_serviceDesc.Streams[2], c.cc, "/stonesthrow.PlatformBuildHost/Run", opts...)
	if err != nil {
		return nil, err
	}
	x := &platformBuildHostRunClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PlatformBuildHost_RunClient interface {
	Recv() (*JobEvent, error)
	grpc.ClientStream
}

type platformBuildHostRunClient struct {
	grpc.ClientStream
}

func (x *platformBuildHostRunClient) Recv() (*JobEvent, error) {
	m := new(JobEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *platformBuildHostClient) Clobber(ctx context.Context, in *RepositoryState, opts ...grpc.CallOption) (PlatformBuildHost_ClobberClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PlatformBuildHost_serviceDesc.Streams[3], c.cc, "/stonesthrow.PlatformBuildHost/Clobber", opts...)
	if err != nil {
		return nil, err
	}
	x := &platformBuildHostClobberClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PlatformBuildHost_ClobberClient interface {
	Recv() (*JobEvent, error)
	grpc.ClientStream
}

type platformBuildHostClobberClient struct {
	grpc.ClientStream
}

func (x *platformBuildHostClobberClient) Recv() (*JobEvent, error) {
	m := new(JobEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *platformBuildHostClient) Prepare(ctx context.Context, in *RepositoryState, opts ...grpc.CallOption) (PlatformBuildHost_PrepareClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PlatformBuildHost_serviceDesc.Streams[4], c.cc, "/stonesthrow.PlatformBuildHost/Prepare", opts...)
	if err != nil {
		return nil, err
	}
	x := &platformBuildHostPrepareClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PlatformBuildHost_PrepareClient interface {
	Recv() (*JobEvent, error)
	grpc.ClientStream
}

type platformBuildHostPrepareClient struct {
	grpc.ClientStream
}

func (x *platformBuildHostPrepareClient) Recv() (*JobEvent, error) {
	m := new(JobEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *platformBuildHostClient) ListTargets(ctx context.Context, in *RepositoryState, opts ...grpc.CallOption) (*TargetList, error) {
	out := new(TargetList)
	err := grpc.Invoke(ctx, "/stonesthrow.PlatformBuildHost/ListTargets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PlatformBuildHost service

type PlatformBuildHostServer interface {
	ListJobs(context.Context, *RepositoryState) (*BuilderJobs, error)
	KillJobs(*BuilderJobs, PlatformBuildHost_KillJobsServer) error
	Build(*BuildOptions, PlatformBuildHost_BuildServer) error
	Run(*RunOptions, PlatformBuildHost_RunServer) error
	Clobber(*RepositoryState, PlatformBuildHost_ClobberServer) error
	Prepare(*RepositoryState, PlatformBuildHost_PrepareServer) error
	ListTargets(context.Context, *RepositoryState) (*TargetList, error)
}

func RegisterPlatformBuildHostServer(s *grpc.Server, srv PlatformBuildHostServer) {
	s.RegisterService(&_PlatformBuildHost_serviceDesc, srv)
}

func _PlatformBuildHost_ListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepositoryState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformBuildHostServer).ListJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stonesthrow.PlatformBuildHost/ListJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformBuildHostServer).ListJobs(ctx, req.(*RepositoryState))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformBuildHost_KillJobs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BuilderJobs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PlatformBuildHostServer).KillJobs(m, &platformBuildHostKillJobsServer{stream})
}

type PlatformBuildHost_KillJobsServer interface {
	Send(*JobEvent) error
	grpc.ServerStream
}

type platformBuildHostKillJobsServer struct {
	grpc.ServerStream
}

func (x *platformBuildHostKillJobsServer) Send(m *JobEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _PlatformBuildHost_Build_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BuildOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PlatformBuildHostServer).Build(m, &platformBuildHostBuildServer{stream})
}

type PlatformBuildHost_BuildServer interface {
	Send(*JobEvent) error
	grpc.ServerStream
}

type platformBuildHostBuildServer struct {
	grpc.ServerStream
}

func (x *platformBuildHostBuildServer) Send(m *JobEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _PlatformBuildHost_Run_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RunOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PlatformBuildHostServer).Run(m, &platformBuildHostRunServer{stream})
}

type PlatformBuildHost_RunServer interface {
	Send(*JobEvent) error
	grpc.ServerStream
}

type platformBuildHostRunServer struct {
	grpc.ServerStream
}

func (x *platformBuildHostRunServer) Send(m *JobEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _PlatformBuildHost_Clobber_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RepositoryState)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PlatformBuildHostServer).Clobber(m, &platformBuildHostClobberServer{stream})
}

type PlatformBuildHost_ClobberServer interface {
	Send(*JobEvent) error
	grpc.ServerStream
}

type platformBuildHostClobberServer struct {
	grpc.ServerStream
}

func (x *platformBuildHostClobberServer) Send(m *JobEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _PlatformBuildHost_Prepare_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RepositoryState)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PlatformBuildHostServer).Prepare(m, &platformBuildHostPrepareServer{stream})
}

type PlatformBuildHost_PrepareServer interface {
	Send(*JobEvent) error
	grpc.ServerStream
}

type platformBuildHostPrepareServer struct {
	grpc.ServerStream
}

func (x *platformBuildHostPrepareServer) Send(m *JobEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _PlatformBuildHost_ListTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepositoryState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformBuildHostServer).ListTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stonesthrow.PlatformBuildHost/ListTargets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformBuildHostServer).ListTargets(ctx, req.(*RepositoryState))
	}
	return interceptor(ctx, in, info, handler)
}

var _PlatformBuildHost_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stonesthrow.PlatformBuildHost",
	HandlerType: (*PlatformBuildHostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListJobs",
			Handler:    _PlatformBuildHost_ListJobs_Handler,
		},
		{
			MethodName: "ListTargets",
			Handler:    _PlatformBuildHost_ListTargets_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "KillJobs",
			Handler:       _PlatformBuildHost_KillJobs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Build",
			Handler:       _PlatformBuildHost_Build_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Run",
			Handler:       _PlatformBuildHost_Run_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Clobber",
			Handler:       _PlatformBuildHost_Clobber_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Prepare",
			Handler:       _PlatformBuildHost_Prepare_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "st.proto",
}

// Client API for RepositoryHost service

type RepositoryHostClient interface {
	GetBranchConfig(ctx context.Context, in *RepositoryState, opts ...grpc.CallOption) (*GitRepositoryInfo, error)
	SetBranchConfig(ctx context.Context, in *GitRepositoryInfo, opts ...grpc.CallOption) (RepositoryHost_SetBranchConfigClient, error)
	PullFromUpstream(ctx context.Context, in *BranchList, opts ...grpc.CallOption) (RepositoryHost_PullFromUpstreamClient, error)
	PushToUpstream(ctx context.Context, in *BranchList, opts ...grpc.CallOption) (RepositoryHost_PushToUpstreamClient, error)
	Status(ctx context.Context, in *RepositoryState, opts ...grpc.CallOption) (RepositoryHost_StatusClient, error)
	SyncLocal(ctx context.Context, in *RepositoryState, opts ...grpc.CallOption) (RepositoryHost_SyncLocalClient, error)
	SyncRemote(ctx context.Context, in *RepositoryState, opts ...grpc.CallOption) (RepositoryHost_SyncRemoteClient, error)
	PrepareForReceive(ctx context.Context, in *RepositoryState, opts ...grpc.CallOption) (RepositoryHost_PrepareForReceiveClient, error)
}

type repositoryHostClient struct {
	cc *grpc.ClientConn
}

func NewRepositoryHostClient(cc *grpc.ClientConn) RepositoryHostClient {
	return &repositoryHostClient{cc}
}

func (c *repositoryHostClient) GetBranchConfig(ctx context.Context, in *RepositoryState, opts ...grpc.CallOption) (*GitRepositoryInfo, error) {
	out := new(GitRepositoryInfo)
	err := grpc.Invoke(ctx, "/stonesthrow.RepositoryHost/GetBranchConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryHostClient) SetBranchConfig(ctx context.Context, in *GitRepositoryInfo, opts ...grpc.CallOption) (RepositoryHost_SetBranchConfigClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RepositoryHost_serviceDesc.Streams[0], c.cc, "/stonesthrow.RepositoryHost/SetBranchConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryHostSetBranchConfigClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RepositoryHost_SetBranchConfigClient interface {
	Recv() (*JobEvent, error)
	grpc.ClientStream
}

type repositoryHostSetBranchConfigClient struct {
	grpc.ClientStream
}

func (x *repositoryHostSetBranchConfigClient) Recv() (*JobEvent, error) {
	m := new(JobEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *repositoryHostClient) PullFromUpstream(ctx context.Context, in *BranchList, opts ...grpc.CallOption) (RepositoryHost_PullFromUpstreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RepositoryHost_serviceDesc.Streams[1], c.cc, "/stonesthrow.RepositoryHost/PullFromUpstream", opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryHostPullFromUpstreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RepositoryHost_PullFromUpstreamClient interface {
	Recv() (*JobEvent, error)
	grpc.ClientStream
}

type repositoryHostPullFromUpstreamClient struct {
	grpc.ClientStream
}

func (x *repositoryHostPullFromUpstreamClient) Recv() (*JobEvent, error) {
	m := new(JobEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *repositoryHostClient) PushToUpstream(ctx context.Context, in *BranchList, opts ...grpc.CallOption) (RepositoryHost_PushToUpstreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RepositoryHost_serviceDesc.Streams[2], c.cc, "/stonesthrow.RepositoryHost/PushToUpstream", opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryHostPushToUpstreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RepositoryHost_PushToUpstreamClient interface {
	Recv() (*JobEvent, error)
	grpc.ClientStream
}

type repositoryHostPushToUpstreamClient struct {
	grpc.ClientStream
}

func (x *repositoryHostPushToUpstreamClient) Recv() (*JobEvent, error) {
	m := new(JobEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *repositoryHostClient) Status(ctx context.Context, in *RepositoryState, opts ...grpc.CallOption) (RepositoryHost_StatusClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RepositoryHost_serviceDesc.Streams[3], c.cc, "/stonesthrow.RepositoryHost/Status", opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryHostStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RepositoryHost_StatusClient interface {
	Recv() (*JobEvent, error)
	grpc.ClientStream
}

type repositoryHostStatusClient struct {
	grpc.ClientStream
}

func (x *repositoryHostStatusClient) Recv() (*JobEvent, error) {
	m := new(JobEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *repositoryHostClient) SyncLocal(ctx context.Context, in *RepositoryState, opts ...grpc.CallOption) (RepositoryHost_SyncLocalClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RepositoryHost_serviceDesc.Streams[4], c.cc, "/stonesthrow.RepositoryHost/SyncLocal", opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryHostSyncLocalClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RepositoryHost_SyncLocalClient interface {
	Recv() (*JobEvent, error)
	grpc.ClientStream
}

type repositoryHostSyncLocalClient struct {
	grpc.ClientStream
}

func (x *repositoryHostSyncLocalClient) Recv() (*JobEvent, error) {
	m := new(JobEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *repositoryHostClient) SyncRemote(ctx context.Context, in *RepositoryState, opts ...grpc.CallOption) (RepositoryHost_SyncRemoteClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RepositoryHost_serviceDesc.Streams[5], c.cc, "/stonesthrow.RepositoryHost/SyncRemote", opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryHostSyncRemoteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RepositoryHost_SyncRemoteClient interface {
	Recv() (*JobEvent, error)
	grpc.ClientStream
}

type repositoryHostSyncRemoteClient struct {
	grpc.ClientStream
}

func (x *repositoryHostSyncRemoteClient) Recv() (*JobEvent, error) {
	m := new(JobEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *repositoryHostClient) PrepareForReceive(ctx context.Context, in *RepositoryState, opts ...grpc.CallOption) (RepositoryHost_PrepareForReceiveClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RepositoryHost_serviceDesc.Streams[6], c.cc, "/stonesthrow.RepositoryHost/PrepareForReceive", opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryHostPrepareForReceiveClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RepositoryHost_PrepareForReceiveClient interface {
	Recv() (*JobEvent, error)
	grpc.ClientStream
}

type repositoryHostPrepareForReceiveClient struct {
	grpc.ClientStream
}

func (x *repositoryHostPrepareForReceiveClient) Recv() (*JobEvent, error) {
	m := new(JobEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for RepositoryHost service

type RepositoryHostServer interface {
	GetBranchConfig(context.Context, *RepositoryState) (*GitRepositoryInfo, error)
	SetBranchConfig(*GitRepositoryInfo, RepositoryHost_SetBranchConfigServer) error
	PullFromUpstream(*BranchList, RepositoryHost_PullFromUpstreamServer) error
	PushToUpstream(*BranchList, RepositoryHost_PushToUpstreamServer) error
	Status(*RepositoryState, RepositoryHost_StatusServer) error
	SyncLocal(*RepositoryState, RepositoryHost_SyncLocalServer) error
	SyncRemote(*RepositoryState, RepositoryHost_SyncRemoteServer) error
	PrepareForReceive(*RepositoryState, RepositoryHost_PrepareForReceiveServer) error
}

func RegisterRepositoryHostServer(s *grpc.Server, srv RepositoryHostServer) {
	s.RegisterService(&_RepositoryHost_serviceDesc, srv)
}

func _RepositoryHost_GetBranchConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepositoryState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryHostServer).GetBranchConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stonesthrow.RepositoryHost/GetBranchConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryHostServer).GetBranchConfig(ctx, req.(*RepositoryState))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryHost_SetBranchConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GitRepositoryInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepositoryHostServer).SetBranchConfig(m, &repositoryHostSetBranchConfigServer{stream})
}

type RepositoryHost_SetBranchConfigServer interface {
	Send(*JobEvent) error
	grpc.ServerStream
}

type repositoryHostSetBranchConfigServer struct {
	grpc.ServerStream
}

func (x *repositoryHostSetBranchConfigServer) Send(m *JobEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _RepositoryHost_PullFromUpstream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BranchList)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepositoryHostServer).PullFromUpstream(m, &repositoryHostPullFromUpstreamServer{stream})
}

type RepositoryHost_PullFromUpstreamServer interface {
	Send(*JobEvent) error
	grpc.ServerStream
}

type repositoryHostPullFromUpstreamServer struct {
	grpc.ServerStream
}

func (x *repositoryHostPullFromUpstreamServer) Send(m *JobEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _RepositoryHost_PushToUpstream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BranchList)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepositoryHostServer).PushToUpstream(m, &repositoryHostPushToUpstreamServer{stream})
}

type RepositoryHost_PushToUpstreamServer interface {
	Send(*JobEvent) error
	grpc.ServerStream
}

type repositoryHostPushToUpstreamServer struct {
	grpc.ServerStream
}

func (x *repositoryHostPushToUpstreamServer) Send(m *JobEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _RepositoryHost_Status_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RepositoryState)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepositoryHostServer).Status(m, &repositoryHostStatusServer{stream})
}

type RepositoryHost_StatusServer interface {
	Send(*JobEvent) error
	grpc.ServerStream
}

type repositoryHostStatusServer struct {
	grpc.ServerStream
}

func (x *repositoryHostStatusServer) Send(m *JobEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _RepositoryHost_SyncLocal_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RepositoryState)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepositoryHostServer).SyncLocal(m, &repositoryHostSyncLocalServer{stream})
}

type RepositoryHost_SyncLocalServer interface {
	Send(*JobEvent) error
	grpc.ServerStream
}

type repositoryHostSyncLocalServer struct {
	grpc.ServerStream
}

func (x *repositoryHostSyncLocalServer) Send(m *JobEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _RepositoryHost_SyncRemote_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RepositoryState)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepositoryHostServer).SyncRemote(m, &repositoryHostSyncRemoteServer{stream})
}

type RepositoryHost_SyncRemoteServer interface {
	Send(*JobEvent) error
	grpc.ServerStream
}

type repositoryHostSyncRemoteServer struct {
	grpc.ServerStream
}

func (x *repositoryHostSyncRemoteServer) Send(m *JobEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _RepositoryHost_PrepareForReceive_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RepositoryState)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepositoryHostServer).PrepareForReceive(m, &repositoryHostPrepareForReceiveServer{stream})
}

type RepositoryHost_PrepareForReceiveServer interface {
	Send(*JobEvent) error
	grpc.ServerStream
}

type repositoryHostPrepareForReceiveServer struct {
	grpc.ServerStream
}

func (x *repositoryHostPrepareForReceiveServer) Send(m *JobEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _RepositoryHost_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stonesthrow.RepositoryHost",
	HandlerType: (*RepositoryHostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBranchConfig",
			Handler:    _RepositoryHost_GetBranchConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SetBranchConfig",
			Handler:       _RepositoryHost_SetBranchConfig_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PullFromUpstream",
			Handler:       _RepositoryHost_PullFromUpstream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PushToUpstream",
			Handler:       _RepositoryHost_PushToUpstream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Status",
			Handler:       _RepositoryHost_Status_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SyncLocal",
			Handler:       _RepositoryHost_SyncLocal_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SyncRemote",
			Handler:       _RepositoryHost_SyncRemote_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PrepareForReceive",
			Handler:       _RepositoryHost_PrepareForReceive_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "st.proto",
}

// Client API for ServiceHost service

type ServiceHostClient interface {
	Shutdown(ctx context.Context, in *RepositoryState, opts ...grpc.CallOption) (ServiceHost_ShutdownClient, error)
	SelfUpdate(ctx context.Context, in *RepositoryState, opts ...grpc.CallOption) (ServiceHost_SelfUpdateClient, error)
}

type serviceHostClient struct {
	cc *grpc.ClientConn
}

func NewServiceHostClient(cc *grpc.ClientConn) ServiceHostClient {
	return &serviceHostClient{cc}
}

func (c *serviceHostClient) Shutdown(ctx context.Context, in *RepositoryState, opts ...grpc.CallOption) (ServiceHost_ShutdownClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ServiceHost_serviceDesc.Streams[0], c.cc, "/stonesthrow.ServiceHost/Shutdown", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceHostShutdownClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServiceHost_ShutdownClient interface {
	Recv() (*JobEvent, error)
	grpc.ClientStream
}

type serviceHostShutdownClient struct {
	grpc.ClientStream
}

func (x *serviceHostShutdownClient) Recv() (*JobEvent, error) {
	m := new(JobEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceHostClient) SelfUpdate(ctx context.Context, in *RepositoryState, opts ...grpc.CallOption) (ServiceHost_SelfUpdateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ServiceHost_serviceDesc.Streams[1], c.cc, "/stonesthrow.ServiceHost/SelfUpdate", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceHostSelfUpdateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServiceHost_SelfUpdateClient interface {
	Recv() (*JobEvent, error)
	grpc.ClientStream
}

type serviceHostSelfUpdateClient struct {
	grpc.ClientStream
}

func (x *serviceHostSelfUpdateClient) Recv() (*JobEvent, error) {
	m := new(JobEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ServiceHost service

type ServiceHostServer interface {
	Shutdown(*RepositoryState, ServiceHost_ShutdownServer) error
	SelfUpdate(*RepositoryState, ServiceHost_SelfUpdateServer) error
}

func RegisterServiceHostServer(s *grpc.Server, srv ServiceHostServer) {
	s.RegisterService(&_ServiceHost_serviceDesc, srv)
}

func _ServiceHost_Shutdown_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RepositoryState)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceHostServer).Shutdown(m, &serviceHostShutdownServer{stream})
}

type ServiceHost_ShutdownServer interface {
	Send(*JobEvent) error
	grpc.ServerStream
}

type serviceHostShutdownServer struct {
	grpc.ServerStream
}

func (x *serviceHostShutdownServer) Send(m *JobEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _ServiceHost_SelfUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RepositoryState)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceHostServer).SelfUpdate(m, &serviceHostSelfUpdateServer{stream})
}

type ServiceHost_SelfUpdateServer interface {
	Send(*JobEvent) error
	grpc.ServerStream
}

type serviceHostSelfUpdateServer struct {
	grpc.ServerStream
}

func (x *serviceHostSelfUpdateServer) Send(m *JobEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _ServiceHost_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stonesthrow.ServiceHost",
	HandlerType: (*ServiceHostServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Shutdown",
			Handler:       _ServiceHost_Shutdown_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SelfUpdate",
			Handler:       _ServiceHost_SelfUpdate_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "st.proto",
}

func init() { proto.RegisterFile("st.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1407 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x5b, 0x6f, 0x1b, 0x45,
	0x14, 0xee, 0xfa, 0x96, 0xdd, 0xe3, 0x12, 0x3b, 0x43, 0x69, 0x5d, 0x53, 0xa5, 0xd5, 0x72, 0x69,
	0xa0, 0x92, 0x0b, 0xae, 0xa0, 0x34, 0x15, 0x97, 0x38, 0x71, 0xd2, 0xa4, 0xa1, 0x09, 0xe3, 0x84,
	0x07, 0x5e, 0xac, 0xb5, 0x77, 0x62, 0x2f, 0x5d, 0xef, 0xb8, 0x33, 0xb3, 0xa9, 0xf2, 0x0f, 0x10,
	0x8f, 0x48, 0x20, 0x7e, 0x01, 0xe2, 0x8f, 0x20, 0x9e, 0x78, 0xe5, 0x9d, 0x77, 0x7e, 0x04, 0x9a,
	0xcb, 0xda, 0x59, 0x3b, 0xb1, 0x2b, 0x97, 0xb7, 0x99, 0x33, 0xe7, 0x7c, 0x73, 0x2e, 0xdf, 0x99,
	0x33, 0x60, 0x73, 0x51, 0x1b, 0x32, 0x2a, 0x28, 0x2a, 0x72, 0x41, 0x23, 0xc2, 0x45, 0x9f, 0xd1,
	0x97, 0xd5, 0xd5, 0x1e, 0xa5, 0xbd, 0x90, 0xdc, 0x57, 0x47, 0x9d, 0xf8, 0xe4, 0xbe, 0x1f, 0x33,
	0x4f, 0x04, 0x34, 0xd2, 0xca, 0xd5, 0xdb, 0x93, 0xe7, 0x22, 0x18, 0x10, 0x2e, 0xbc, 0xc1, 0x50,
	0x2b, 0xb8, 0xdf, 0xc1, 0xd5, 0x56, 0x9f, 0x84, 0xe1, 0x26, 0x1d, 0x0c, 0xbc, 0xc8, 0x47, 0x15,
	0x58, 0xea, 0xea, 0x65, 0xc5, 0xba, 0x93, 0x5d, 0x73, 0x70, 0xb2, 0x45, 0xb7, 0xc0, 0xf1, 0x03,
	0x46, 0xba, 0x82, 0xb2, 0xb3, 0x4a, 0xe6, 0x8e, 0xb5, 0xe6, 0xe0, 0xb1, 0x00, 0x21, 0xc8, 0xf5,
	0x29, 0x17, 0x95, 0xac, 0x3a, 0x50, 0x6b, 0xf7, 0x1f, 0x0b, 0x1c, 0x05, 0x7e, 0xe4, 0xf1, 0xe7,
	0xe8, 0xc1, 0x79, 0x64, 0x6b, 0xad, 0x58, 0xbf, 0x59, 0x3b, 0x17, 0x49, 0xed, 0xbc, 0x17, 0xe3,
	0x4b, 0xef, 0x41, 0x9e, 0x0b, 0x4f, 0x10, 0x75, 0x61, 0xb1, 0xfe, 0x56, 0xca, 0x04, 0xc7, 0x51,
	0x4b, 0x1e, 0x62, 0xad, 0x83, 0xd6, 0xa1, 0xc8, 0xcf, 0xb8, 0x20, 0x83, 0xb6, 0x8c, 0x52, 0xb9,
	0x22, 0x6f, 0xd1, 0x29, 0xa8, 0x25, 0x29, 0xa8, 0x6d, 0x99, 0x14, 0x61, 0xd0, 0xda, 0x47, 0xc1,
	0x80, 0xa0, 0x4f, 0xc1, 0x89, 0x39, 0x61, 0xda, 0x32, 0x37, 0xcf, 0xd2, 0x96, 0xba, 0xd2, 0xce,
	0xfd, 0x1a, 0x4a, 0x98, 0x0c, 0x29, 0x0f, 0x64, 0x16, 0x94, 0x37, 0x68, 0x15, 0x80, 0x8d, 0x44,
	0x26, 0x53, 0xe7, 0x24, 0xa8, 0x0a, 0x36, 0x23, 0xa7, 0x01, 0x0f, 0x68, 0x64, 0xd2, 0x35, 0xda,
	0xbb, 0xbf, 0x58, 0x60, 0x27, 0x61, 0xa1, 0x47, 0x00, 0x5c, 0x78, 0x4c, 0x68, 0xa7, 0x74, 0xd2,
	0xaa, 0x53, 0x4e, 0x1d, 0x25, 0x15, 0xc5, 0x8e, 0xd2, 0x56, 0xe1, 0x54, 0x60, 0x89, 0xc5, 0x51,
	0x14, 0x44, 0x3d, 0xe5, 0x80, 0x8d, 0x93, 0x2d, 0xfa, 0x04, 0x6c, 0x12, 0xf9, 0xe7, 0x33, 0x34,
	0x0b, 0x72, 0x89, 0x44, 0xbe, 0x8a, 0xf3, 0x5f, 0x0b, 0xa0, 0x11, 0x07, 0xa1, 0x4f, 0xd8, 0x1e,
	0xed, 0xa0, 0x65, 0xc8, 0x04, 0xba, 0x8e, 0x79, 0x9c, 0x09, 0x14, 0x6d, 0x18, 0x79, 0x11, 0x13,
	0x2e, 0x4c, 0xc0, 0xc9, 0x16, 0xed, 0x40, 0x79, 0x1c, 0x7b, 0x5b, 0x17, 0x53, 0xdf, 0x7b, 0x2b,
	0x5d, 0xcc, 0x74, 0x16, 0x71, 0x89, 0x4d, 0xa4, 0xb5, 0x0e, 0x0e, 0x8b, 0x23, 0x83, 0x90, 0x9b,
	0x45, 0x07, 0x9b, 0x25, 0x19, 0x7c, 0x08, 0x45, 0x2e, 0x79, 0xd5, 0x16, 0x1e, 0x7f, 0xce, 0x2b,
	0xf9, 0x3b, 0xd9, 0xb5, 0x62, 0xfd, 0xfa, 0x34, 0xef, 0x24, 0x41, 0x31, 0xf0, 0x64, 0xc9, 0xdd,
	0x75, 0x28, 0x8e, 0xa3, 0xe5, 0xe8, 0x1e, 0xe4, 0xbe, 0xa7, 0x1d, 0xae, 0x5a, 0xa2, 0x58, 0xbf,
	0x91, 0x02, 0x18, 0xeb, 0x61, 0xa5, 0xe4, 0xfe, 0x98, 0x83, 0x95, 0x9d, 0x40, 0x8c, 0x03, 0xda,
	0x8d, 0x4e, 0x28, 0xda, 0x00, 0xbb, 0xc3, 0xbc, 0xa8, 0xdb, 0x27, 0x09, 0xcc, 0x7b, 0x29, 0x98,
	0x29, 0x8b, 0x5a, 0x43, 0xa9, 0xe3, 0x91, 0x19, 0x6a, 0x82, 0x13, 0x0f, 0xb9, 0x60, 0xc4, 0x1b,
	0xf0, 0x4a, 0x46, 0x61, 0xdc, 0x9d, 0x83, 0x71, 0x6c, 0xf4, 0xf1, 0xd8, 0xb2, 0xfa, 0x53, 0x06,
	0x0a, 0x1a, 0x5b, 0x76, 0x6d, 0xe4, 0x19, 0x6e, 0x39, 0x58, 0xad, 0x53, 0xf4, 0xcc, 0xa4, 0xe9,
	0x89, 0xee, 0x42, 0x29, 0x59, 0xf3, 0xb6, 0xd7, 0x27, 0x9e, 0xaf, 0x6a, 0x99, 0xc7, 0xcb, 0x23,
	0xf1, 0x86, 0x94, 0xa2, 0x0f, 0x64, 0xd5, 0x13, 0xc5, 0x0e, 0xe9, 0x07, 0x91, 0xaf, 0x6a, 0x96,
	0xc7, 0x63, 0x80, 0x86, 0x12, 0xa3, 0x5d, 0x28, 0x74, 0x69, 0x74, 0x12, 0xf4, 0x4c, 0x79, 0x3e,
	0x7e, 0xa5, 0xb4, 0xd4, 0x36, 0x95, 0x4d, 0x33, 0x12, 0xec, 0x0c, 0x1b, 0x80, 0xea, 0x23, 0x28,
	0x9e, 0x13, 0xa3, 0x32, 0x64, 0x9f, 0x93, 0x33, 0x13, 0x9c, 0x5c, 0xa2, 0x6b, 0x90, 0x3f, 0xf5,
	0xc2, 0x98, 0x98, 0xc0, 0xf4, 0x66, 0x3d, 0xf3, 0x99, 0x55, 0xfd, 0x16, 0xec, 0x24, 0x57, 0x17,
	0x66, 0xe5, 0x26, 0xd8, 0xc3, 0x98, 0xf7, 0xdb, 0x31, 0x0b, 0x13, 0x86, 0xcb, 0xfd, 0x31, 0x0b,
	0xd1, 0xdb, 0xe0, 0x9c, 0x10, 0xd1, 0xd5, 0x67, 0xa6, 0xa1, 0x95, 0xe0, 0x98, 0x85, 0xee, 0xaf,
	0x16, 0xd8, 0xfb, 0xb4, 0xd7, 0x3c, 0x25, 0x91, 0x18, 0x3d, 0x92, 0xd6, 0xf8, 0x91, 0x94, 0x4e,
	0x0e, 0x78, 0xcf, 0x60, 0xca, 0x25, 0x5a, 0x07, 0x9b, 0x93, 0x53, 0xc2, 0x02, 0x71, 0xa6, 0xe0,
	0x96, 0xeb, 0xab, 0xa9, 0x94, 0x24, 0x70, 0xb5, 0x96, 0xd1, 0xc2, 0x23, 0x7d, 0xf7, 0x43, 0xb0,
	0x13, 0x29, 0x72, 0x20, 0xdf, 0xc4, 0xf8, 0x00, 0x97, 0xaf, 0x20, 0x1b, 0x72, 0xbb, 0xcf, 0xb6,
	0x0f, 0xca, 0x96, 0x14, 0x6e, 0x35, 0x1b, 0xc7, 0x3b, 0xe5, 0x8c, 0xfb, 0x04, 0x56, 0x1a, 0xa4,
	0x17, 0x44, 0xe6, 0xd1, 0xd5, 0x2e, 0x2e, 0xf2, 0x4a, 0xbb, 0x3f, 0x58, 0x80, 0x8c, 0xf0, 0x20,
	0x16, 0xc3, 0x58, 0x68, 0xac, 0x2f, 0xa0, 0xa0, 0x33, 0xaa, 0xa0, 0x96, 0xeb, 0xef, 0xa7, 0xa0,
	0xa6, 0x0d, 0x6a, 0x2d, 0xcd, 0x55, 0x63, 0x85, 0xae, 0x43, 0x81, 0xaa, 0x53, 0x93, 0x1d, 0xb3,
	0x73, 0xab, 0x50, 0xd0, 0x9a, 0x68, 0x09, 0xb2, 0x07, 0xc7, 0x47, 0xe5, 0x2b, 0x72, 0xd1, 0xc4,
	0xb8, 0x6c, 0xb9, 0xbf, 0x59, 0x50, 0x6a, 0x46, 0x7e, 0x2a, 0xa6, 0xdb, 0x50, 0x64, 0x44, 0xc4,
	0x2c, 0x6a, 0x77, 0xa9, 0x4f, 0xcc, 0xab, 0x05, 0x5a, 0xb4, 0x49, 0xfd, 0xa9, 0xc1, 0x91, 0x59,
	0x78, 0x70, 0x64, 0x5f, 0x7d, 0x70, 0xfc, 0x61, 0x01, 0xda, 0x09, 0x84, 0x66, 0xb3, 0x7c, 0x74,
	0xb4, 0xaf, 0xd7, 0xa1, 0xa0, 0xfb, 0xdd, 0x90, 0xc4, 0xec, 0x64, 0x2e, 0x19, 0xe1, 0x71, 0xa8,
	0x73, 0x31, 0x99, 0xcb, 0x69, 0xa0, 0x1a, 0x56, 0xda, 0xd8, 0x58, 0xcd, 0x1a, 0x3a, 0xf2, 0x4e,
	0x46, 0x3c, 0x4e, 0x23, 0xd5, 0xa2, 0x0e, 0x36, 0x3b, 0xf7, 0x1d, 0x28, 0x68, 0x14, 0xf4, 0x06,
	0x38, 0xad, 0xe3, 0xcd, 0xcd, 0x66, 0x73, 0xab, 0xb9, 0x55, 0xbe, 0x82, 0x00, 0x0a, 0xdb, 0x1b,
	0xbb, 0xfb, 0xcd, 0xad, 0xb2, 0xe5, 0xfe, 0x9e, 0x05, 0x7b, 0x8f, 0x76, 0xb4, 0xf7, 0x35, 0xc8,
	0xbd, 0xe2, 0xac, 0x52, 0x7a, 0xf2, 0x4d, 0x0f, 0x69, 0xaf, 0x4d, 0xa4, 0xf1, 0x85, 0x23, 0x3e,
	0xe1, 0x3a, 0xb6, 0xc3, 0xa4, 0x89, 0x9e, 0xc1, 0x9b, 0x1d, 0x49, 0xdb, 0xb6, 0x61, 0x9f, 0xb1,
	0xd6, 0xa9, 0x4f, 0x77, 0xca, 0x14, 0xbd, 0xf1, 0x4a, 0x67, 0x8a, 0xf1, 0xdf, 0xc0, 0xb5, 0x04,
	0x49, 0xf3, 0xcb, 0x00, 0xea, 0x11, 0x73, 0x7b, 0x0e, 0x67, 0x31, 0xea, 0x4e, 0x13, 0xff, 0x09,
	0xac, 0xc8, 0x19, 0x9b, 0x76, 0x30, 0x7f, 0xc1, 0xd0, 0x9b, 0x60, 0x2a, 0x2e, 0x91, 0x09, 0xea,
	0x3e, 0x85, 0x15, 0x4d, 0x00, 0x35, 0xc1, 0x0c, 0x52, 0xe1, 0x02, 0xcf, 0xa6, 0x19, 0x80, 0x4b,
	0x9d, 0xb4, 0xc0, 0x7d, 0x01, 0x57, 0xd5, 0xb0, 0x3a, 0x18, 0x4a, 0x2e, 0x72, 0x39, 0xb4, 0x85,
	0xc7, 0x7a, 0x44, 0xf0, 0xe4, 0xaf, 0x67, 0xb6, 0x17, 0x0e, 0xed, 0xcc, 0x02, 0x43, 0xdb, 0x7d,
	0x17, 0xe0, 0x48, 0x61, 0xee, 0x07, 0x5c, 0x91, 0x5b, 0xdf, 0x60, 0xee, 0x33, 0x3b, 0xa9, 0xa5,
	0x9d, 0x4f, 0xb4, 0x46, 0x2d, 0x90, 0x1d, 0xb7, 0x80, 0xfb, 0xa7, 0x05, 0x80, 0xe3, 0x28, 0xf1,
	0x7e, 0xa1, 0xff, 0xe4, 0x63, 0xb8, 0xea, 0x93, 0x21, 0x89, 0x7c, 0x12, 0x75, 0x03, 0xc2, 0x4d,
	0x50, 0xe9, 0x81, 0x3e, 0x76, 0x18, 0xa7, 0x94, 0xff, 0xb7, 0xaf, 0x4c, 0xfd, 0xef, 0x2c, 0xac,
	0x1c, 0x86, 0x9e, 0x38, 0xa1, 0x6c, 0xa0, 0x2a, 0xf2, 0x44, 0x4e, 0x82, 0x06, 0xd8, 0xf2, 0x52,
	0xf5, 0xe1, 0x98, 0x09, 0x58, 0xad, 0x5c, 0xf2, 0x01, 0xe1, 0xe8, 0x73, 0xb0, 0x9f, 0x06, 0x61,
	0xa8, 0xd6, 0x97, 0x6a, 0x55, 0xd3, 0x3d, 0x96, 0x74, 0xef, 0x47, 0x16, 0x7a, 0x0c, 0x79, 0xa5,
	0x87, 0x6e, 0x4e, 0xdb, 0x9a, 0xbc, 0x5f, 0x6e, 0xfc, 0x10, 0xb2, 0x38, 0x8e, 0xd0, 0x8d, 0xc9,
	0x4f, 0xd9, 0x5c, 0xc3, 0xaf, 0x60, 0x69, 0x33, 0xa4, 0x9d, 0x0e, 0x61, 0x73, 0xe2, 0x9e, 0x85,
	0x70, 0xc8, 0xc8, 0xd0, 0x63, 0x64, 0x51, 0x84, 0x2d, 0x28, 0xca, 0xe4, 0x1f, 0x99, 0x06, 0x98,
	0x8d, 0x72, 0x19, 0x5f, 0xea, 0x7f, 0xe5, 0x60, 0x79, 0xac, 0xac, 0xaa, 0x7a, 0x00, 0xa5, 0x1d,
	0x62, 0x7a, 0x53, 0x7f, 0x4e, 0xe6, 0x80, 0xaf, 0xce, 0xfe, 0xff, 0xa0, 0x3d, 0x28, 0xb5, 0x26,
	0x00, 0xe7, 0x98, 0xcc, 0x8a, 0xba, 0x7c, 0x18, 0x87, 0xe1, 0x36, 0xa3, 0x83, 0xd1, 0xef, 0x67,
	0xe2, 0x77, 0x3b, 0xea, 0xcb, 0xcb, 0x51, 0x1a, 0xb0, 0x7c, 0x18, 0xf3, 0xfe, 0x11, 0x7d, 0x0d,
	0x8c, 0x2f, 0xe5, 0x4c, 0xf7, 0x44, 0xcc, 0x17, 0x2d, 0x60, 0x03, 0x9c, 0xd6, 0x59, 0xd4, 0xdd,
	0xa7, 0x5d, 0x2f, 0x5c, 0x14, 0x63, 0x13, 0x40, 0x62, 0x60, 0x32, 0xa0, 0x62, 0x61, 0x26, 0xed,
	0xc1, 0x8a, 0xe1, 0xe2, 0x36, 0x65, 0x98, 0x74, 0x49, 0x70, 0xba, 0x28, 0x56, 0xfd, 0x67, 0x0b,
	0x8a, 0x2d, 0xc2, 0x4e, 0x83, 0x2e, 0x51, 0x64, 0xda, 0x00, 0xbb, 0xd5, 0x8f, 0x85, 0x4f, 0x5f,
	0x46, 0xaf, 0x13, 0x23, 0x09, 0x4f, 0x8e, 0x87, 0xbe, 0xb7, 0x70, 0x8c, 0x9d, 0x82, 0x9a, 0xe8,
	0x0f, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xd2, 0x0a, 0x9c, 0xf8, 0x96, 0x10, 0x00, 0x00,
}
